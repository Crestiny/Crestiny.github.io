<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何成为小说写手</title>
      <link href="2021/09/11/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E5%B0%8F%E8%AF%B4%E5%86%99%E6%89%8B/"/>
      <url>2021/09/11/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E5%B0%8F%E8%AF%B4%E5%86%99%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 梦想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dreams Collection</title>
      <link href="2021/09/08/Dreams-Collection/"/>
      <url>2021/09/08/Dreams-Collection/</url>
      
        <content type="html"><![CDATA[<p>有时候会想起很久以前的自己，其实有很多爱好和梦想。后来不知道为什么，很久很久没有接触过以前喜欢的东西了；看似长大了时间越来越自由，但实际上，“自由”不过是没有那么详细地规定你该在什么时候干什么，如果想达到某些目标，平时花费的时间还是少不了的。更何况我总是“贪心”的，一些东西刚到手，又开始期望其他更好的东西</p><p>大概12岁的时候看了人生第一本古言小说，后来一直很喜欢古风，还混过一段时间的古风圈。</p><p>那个时候的爱好是手写、填词、绘画；古风小说也没少看，也夹杂着一些名著和诗词相关书籍</p><p>小说里面印象比较深的是凤凰错、帝凰之神医弃妃、秦寂言顾千城、景佳人、顾小艾、肖九（阿彩的书基本都看过了哈哈）</p><p>还去学了古筝，虽然只在升学的那个暑假有空，几乎是两三年一练，高考完学到八级就没有后续了；但是现在很想捡起来</p><p>对了，还有古风歌，少司命、河图、critty、银临、小曲儿、重小烟</p><ul><li>写一篇短篇小说</li><li>考驾照</li><li>考古筝的级</li><li>拍艺术照</li><li>减肥健身</li><li>看一些想看的电影</li><li>学做手账</li><li>学拍视频</li><li>看一些想看的书</li><li>找一份实习</li><li>考六级</li><li>考雅思</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 梦想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的小乌龟</title>
      <link href="2021/09/04/%E6%88%91%E7%9A%84%E5%B0%8F%E4%B9%8C%E9%BE%9F/"/>
      <url>2021/09/04/%E6%88%91%E7%9A%84%E5%B0%8F%E4%B9%8C%E9%BE%9F/</url>
      
        <content type="html"><![CDATA[<p>今天我的小乌龟回天上了，纪念一下和它在一起短暂而美好的时光，尽管不到半年。</p><h2 id="初见"><a class="header-anchor" href="#初见">¶</a>初见</h2><p>4月的一天晚上，我在学校门口遇见了一位挑着小宠物在卖的阿姨。</p><p>我想起之前在家的时候妈妈和我说：“你一个人在宿舍无聊可以养一只乌龟，挺好的”。</p><p>于是我鬼使神差地上前问了问价格，便决定买下一只小小的巴西龟。</p><p>以及一个蓝色的小缸和一袋龟粮。</p><p>由于我本来是打算出门逛逛的，所以买了乌龟后就按照原计划在校外那几个精品店逛街。</p><p>我一手拎着小乌龟，店员有些惊讶地说道：“还是头一次见人溜乌龟呢！”我笑了笑。</p><p>随后我带着小乌龟回了宿舍，便开启了养龟新手的身份。</p><h2 id="日常"><a class="header-anchor" href="#日常">¶</a>日常</h2><p>刚把小龟带回来时，我发现它在水缸里待不住。</p><p>起初以为是初始的小蓝缸太窄了，我便网购了一个更大的缸。没想到小龟还是一个劲儿地向外爬，于是我把它捞起来擦干，放到了书桌上；不一会，它就啪嗒啪嗒地往书柜的角落钻去，和充电排插呆在一起。</p><p>之后它经常往那边挤，我便意识到它应该很喜欢那里：阴暗，且有暖和的充电器。</p><p>每次一找不到龟了，往那里一掏，99%能揪住它。而把它揪出来一看，又90%在眯着眼睛睡大觉。真是只小懒龟啊。</p><p>剩下1%找不到它的情况，就是自己钻到奇怪的缝隙或者角落里了；有一次在书架与墙之间找到了它，还有一次是半开的抽屉接住了它。刚开始遇到找不到小乌龟的情况我还很着急，后来了解了它的习性就学会冷静分析一波再去揪它了。</p><p>那时候我每天还有课，去上课之前便匆匆忙忙把小龟喂了，有时候还得挤时间出来给它换水。</p><p>我把之前一个废弃的隐形眼镜盒子的盒子放在了缸里，那是一个小黄鸭的造型。每次小乌龟总喜欢往那里面钻，胆子小小的，身体也小小的，窝在里面的话，从外观上就找不见了。</p><p>过五一节的时候我把它拜托给了舍友和一个朋友，如今想想还是有点心大。现在回想起来，总觉得怎么看紧它都不够。</p><p>就这样日复一日，小乌龟陪着我在宿舍学习。这学期由于保研的缘故，和舍友的共同话题越发地少，无聊的时候我就会逗逗小乌龟，撸撸它的小脑袋，戳戳它的小爪子。</p><p>把它放在笔记本电脑上，键盘前方有一小块发着热的空地，它经常在上面耷拉着脑袋睡觉觉；看来是把我的电脑当成电热毯了呀。不知道该不该感谢我的风扇散热功能不咋地哈哈哈</p><p>小乌龟把脑袋拉长贴在地上睡着的样子真的好可爱，我拍了好多它睡觉觉的照片呢</p><h2 id="生病"><a class="header-anchor" href="#生病">¶</a>生病</h2><p>有一段时间，小乌龟开始发出奇怪的声音，会张嘴，嘴边还会有棕色液体。</p><p>我觉得有些异常，便带它去看医生；可我没想到能看乌龟的地方还挺少的。</p><p>我先坐公交去了一个地方，七拐八拐地，下车以后还得走好一段路。好不容易到了医院，医生说：</p><p>“我们这里看不了小乌龟哦”</p><p>我把小龟的病情给医生说了一下，他给我开了一副药，说不一定能有效，但是没什么危害，可以试试。</p><p>我怕一会找不到别的医院可以看小乌龟了，就先把药买下了。</p><p>出了医院，我用地图搜出了十几个宠物医院；按照地图上的电话一个个打过去，机械地问着同一句话。大概打到第十几个医院的时候，那边终于说可以治小乌龟，我已经顾不得远不远了，地图搜索了以后我立马带着小乌龟飞奔而去。</p><p>在医院，医生拿着听诊器贴在小乌龟的底壳上，小乌龟也就比听诊器大一小圈吧。他开了一个白色的小药片，让我给龟龟喂药；并且药浴，多观察一下（此时的我还不知道喂药是一件多难的事情</p><p>感谢过医生并留下他的微信后，我顺路买了土霉素，如释重负地回到宿舍。</p><hr><p>龟龟在喝药这件事情上，真没有一次是完全喝下去过</p><p>它的小嘴真的太难撬开了，我又不敢使劲捏它的小脑袋；对于学生来说，药还是有一些些贵的；但是由于喂不进去，所以80%浪费了。我也想过很多很多办法，比如用食物引诱它张开嘴，再趁机把药水注射到那一小块水中；或者用什么东西撬开它的嘴。唯一一次喝的比较多的，是我趁它张嘴呼吸的时候，把一根薄薄的不锈钢卡子塞在它嘴里，于是把药为了进去</p><p>我执着于给龟龟喂药，是因为我真的很害怕医生说的那一句：“有可能是肺炎哦，如果吃完药还不好，可能有点救不回来了”</p><p>我无法想象一个小生命救不回来的无力感，于是哪怕有点强迫它，我也得把药给喂进去</p><p>还好，喂完所有药之后，龟龟似乎不再流出棕色液体了</p><p>我觉得它挺过这一关了</p><h2 id="回家"><a class="header-anchor" href="#回家">¶</a>回家</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宠物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning PHP Part 2</title>
      <link href="2021/08/03/Learning-PHP-Part-2/"/>
      <url>2021/08/03/Learning-PHP-Part-2/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Learning PHP - Part 1</title>
      <link href="2021/07/31/Learning-PHP-Part-1/"/>
      <url>2021/07/31/Learning-PHP-Part-1/</url>
      
        <content type="html"><![CDATA[<h1>PHP学习1</h1><p>[TOC]</p><h2 id="PHP简介"><a class="header-anchor" href="#PHP简介">¶</a>PHP简介</h2><p>PHP 是服务器端脚本语言，在web端开发中常用</p><h3 id="PHP文件"><a class="header-anchor" href="#PHP文件">¶</a>PHP文件</h3><ul><li>PHP 文件可包含<strong>文本、HTML、JavaScript代码和 PHP 代码</strong></li><li>PHP 代码在服务器上执行，结果<strong>以纯 HTML 形式返回给浏览器</strong></li><li>PHP 文件的默认文件扩展名是 “.php”</li></ul><h3 id="PHP作用"><a class="header-anchor" href="#PHP作用">¶</a>PHP作用</h3><ul><li>PHP 可以生成动态页面内容</li><li>PHP 可以创建、打开、读取、写入、关闭服务器上的文件</li><li>PHP 可以收集表单数据</li><li>PHP 可以发送和接收 cookies</li><li>PHP 可以添加、删除、修改您的数据库中的数据</li><li>PHP 可以限制用户访问您的网站上的一些页面</li><li>PHP 可以加密数据</li></ul><h2 id="PHP语法"><a class="header-anchor" href="#PHP语法">¶</a>PHP语法</h2><ul><li>PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码。</li><li>通过 PHP，有两种在浏览器输出文本的基础指令：<strong>echo</strong> 和 <strong>print</strong>。</li><li>PHP 脚本以 <strong><!--?php** 开始，以 **?--></strong> 结束</li><li>注释和C差不多</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;My first PHP page&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hello World!"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是 PHP 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是</span></span><br><span class="line"><span class="comment">PHP 多行</span></span><br><span class="line"><span class="comment">注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="PHP变量"><a class="header-anchor" href="#PHP变量">¶</a>PHP变量</h2><h3 id="命名规则"><a class="header-anchor" href="#命名规则">¶</a>命名规则</h3><ul><li>变量以 $ 符号开始，后面跟着变量的名称</li><li>变量名必须以字母或者下划线字符开始</li><li>变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）</li><li>变量名不能包含空格</li><li>变量名是区分大小写的（$y 和 $Y 是两个不同的变量）</li></ul><h3 id="变量类型与声明"><a class="header-anchor" href="#变量类型与声明">¶</a>变量类型与声明</h3><ul><li><p>不必向 PHP 声明该变量的数据类型（这点和Python一样），PHP 会根据变量的值，自动把变量转换为正确的数据类型。</p></li><li><p>PHP 没有声明变量的命令，变量在您第一次赋值给它的时候被创建</p></li></ul><h3 id="变量作用域"><a class="header-anchor" href="#变量作用域">¶</a>变量作用域</h3><p>PHP 有四种不同的变量作用域：（并不是说有这四种关键字？反正我是没看到www）</p><ul><li>local</li><li>global</li><li>static</li><li>parameter</li></ul><h3 id="global"><a class="header-anchor" href="#global">¶</a>global</h3><p>在函数外面定义的就叫全局变量，函数里面定义的就叫局部变量。神奇的是global并不是声明变量时使用的（php也没有变量声明），而是在函数内访问全局变量时使用</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x=<span class="number">5</span>;</span><br><span class="line">$y=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">global</span> $x,$y;</span><br><span class="line">$y=$x+$y;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">myTest();</span><br><span class="line"><span class="keyword">echo</span> $y; <span class="comment">// 输出 15</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>PHP 将所有全局变量存储在一个名为 $GLOBALS[<em>index</em>] 的数组中。 <em>index</em> 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量。</p><p>上面的实例可以写成这样：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x=<span class="number">5</span>;</span><br><span class="line">$y=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">$GLOBALS[<span class="string">'y'</span>]=$GLOBALS[<span class="string">'x'</span>]+$GLOBALS[<span class="string">'y'</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">myTest();</span><br><span class="line"><span class="keyword">echo</span> $y;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="static"><a class="header-anchor" href="#static">¶</a>static</h3><p>当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除。</p><p>要做到这一点，请在您第一次声明变量时使用 <strong>static</strong> 关键字：</p><p>然后，每次调用该函数时，该变量将会保留着函数前一次被调用时的值。</p><p>**注释：**该变量仍然是函数的局部变量。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">static</span> $x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">echo</span> $x;</span><br><span class="line">$x++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">myTest();</span><br><span class="line">myTest();</span><br><span class="line">myTest();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="参数作用域"><a class="header-anchor" href="#参数作用域">¶</a>参数作用域</h3><p>在函数的参数列表里的参数，有参数作用域</p><h2 id="echo和print"><a class="header-anchor" href="#echo和print">¶</a>echo和print</h2><p>echo , print 和 print_r的区别:</p><ul><li>echo  - 可以输出一个或多个字符串</li><li>print  - 只能输出简单类型变量的值,如int,string</li><li>print_r - 可以输出复杂类型变量的值,如数组,对象</li></ul><p>PHP 是通过 print 和 echo 语句来动态输出 HTML 内容，虽然 print 和 echo 语句两者的功能几乎是完全一样，但是还是有一点差别的。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$txt1=<span class="string">"Learn PHP"</span>;</span><br><span class="line">$a=<span class="number">1</span>;</span><br><span class="line">$txt2=<span class="string">"w3cschool.cn"</span>;</span><br><span class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</span><br><span class="line"><span class="keyword">echo</span> $txt1;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Study PHP at $txt2"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"My car is a {$cars[0]}"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Learn PHP</span></span><br><span class="line"><span class="comment">Study PHP at w3cschool.cn</span></span><br><span class="line"><span class="comment">My car is a Volvo</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>print_r可以输出数组</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</span><br><span class="line"></span><br><span class="line">print_r($cars);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [0] =&gt; Volvo</span></span><br><span class="line"><span class="comment">    [1] =&gt; BMW</span></span><br><span class="line"><span class="comment">    [2] =&gt; Toyota</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h2 id="PHP-5-数据类型"><a class="header-anchor" href="#PHP-5-数据类型">¶</a>PHP 5 数据类型</h2><p>String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）。</p><p>数组可以在一个变量中存储多个值。</p><p>在以下实例中创建了一个数组， 然后使用 PHP var_dump() 函数返回数组的数据类型和值：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</span><br><span class="line">var_dump($cars);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">array(3) {</span></span><br><span class="line"><span class="comment">  [0]=&gt;</span></span><br><span class="line"><span class="comment">  string(5) "Volvo"</span></span><br><span class="line"><span class="comment">  [1]=&gt;</span></span><br><span class="line"><span class="comment">  string(3) "BMW"</span></span><br><span class="line"><span class="comment">  [2]=&gt;</span></span><br><span class="line"><span class="comment">  string(6) "Toyota"</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>类和对象：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">var</span> $color;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">$color=<span class="string">"green"</span></span>) </span>{</span><br><span class="line">        <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">what_color</span>(<span class="params"></span>) </span>{   </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;color;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print_vars</span>(<span class="params">$obj</span>) </span>{</span><br><span class="line">    <span class="keyword">foreach</span> (get_object_vars($obj) <span class="keyword">as</span> $prop =&gt; $val) {</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$prop = $val"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 new 语句实例化一个对象（类）。</span></span><br><span class="line">$herbie = <span class="keyword">new</span> Car(<span class="string">"white"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出变量 $herbie 的属性。</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"herbie: Properties&lt;br&gt;"</span>;</span><br><span class="line">print_vars($herbie);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span>&nbsp;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">herbie: Properties</span></span><br><span class="line"><span class="comment">color = white</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h2 id="PHP5-常量"><a class="header-anchor" href="#PHP5-常量">¶</a>PHP5 常量</h2><p>设置常量，使用 define() 函数，函数语法如下：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> define ( <span class="keyword">string</span> $name , mixed $value [, <span class="keyword">bool</span> $case_insensitive = <span class="literal">false</span> ] )</span><br></pre></td></tr></tbody></table></figure><p>该函数有三个参数:</p><ul><li>constant_name：必选参数，常量名称，即标志符。</li><li>value：必选参数，常量的值。</li><li>case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。</li></ul><p>大小写不敏感：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// define a case-insensitive constant</span></span><br><span class="line">define(<span class="string">"GREETING"</span>, <span class="string">"Welcome to w3cschool.cn!"</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">echo</span> GREETING;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"><span class="comment">// will also output the value of the constant</span></span><br><span class="line"><span class="keyword">echo</span> greeting;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Welcome to w3cschool.cn!</span></span><br><span class="line"><span class="comment">Welcome to w3cschool.cn!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h2 id="PHP-字符串变量"><a class="header-anchor" href="#PHP-字符串变量">¶</a>PHP 字符串变量</h2><h3 id="并置运算符"><a class="header-anchor" href="#并置运算符">¶</a>并置运算符</h3><p>就是一个点.</p><p>可以在两个字符串中间插入空格：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$txt1=<span class="string">"Hello world!"</span>;</span><br><span class="line">$txt2=<span class="string">"What a nice day!"</span>;</span><br><span class="line"><span class="keyword">echo</span> $txt1 . <span class="string">" "</span> . $txt2;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="strlen-函数"><a class="header-anchor" href="#strlen-函数">¶</a>strlen() 函数</h3><p>获取字符串长度</p><h3 id="strpos-函数"><a class="header-anchor" href="#strpos-函数">¶</a>strpos() 函数</h3><p>strpos() 函数用于在字符串内查找一个字符或一段指定的文本。下标从0开始，如果未找到匹配，则返回 FALSE。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> strpos(<span class="string">"Hello world!"</span>,<span class="string">"world"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h2 id="PHP运算符"><a class="header-anchor" href="#PHP运算符">¶</a>PHP运算符</h2><p>基本和c一样</p><p>逻辑运算符有and、or、xor，当然用符号也是可以的</p><h3 id="数组运算符"><a class="header-anchor" href="#数组运算符">¶</a>数组运算符</h3><p>这个还挺特殊：</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">x + y</td><td style="text-align:left">集合</td><td style="text-align:left">x 和 y 的集合</td></tr><tr><td style="text-align:left">x == y</td><td style="text-align:left">相等</td><td style="text-align:left">如果 x 和 y 具有相同的键/值对，则返回 true</td></tr><tr><td style="text-align:left">x === y</td><td style="text-align:left">恒等</td><td style="text-align:left">如果 x 和 y 具有相同的键/值对，且顺序相同类型相同，则返回 true</td></tr><tr><td style="text-align:left">x != y</td><td style="text-align:left">不相等</td><td style="text-align:left">如果 x 不等于 y，则返回 true</td></tr><tr><td style="text-align:left">x &lt;&gt; y</td><td style="text-align:left">不相等</td><td style="text-align:left">如果 x 不等于 y，则返回 true</td></tr><tr><td style="text-align:left">x !== y</td><td style="text-align:left">不恒等</td><td style="text-align:left">如果 x 不等于 y，则返回 true</td></tr></tbody></table><h2 id="PHP数组"><a class="header-anchor" href="#PHP数组">¶</a>PHP数组</h2><p>在 PHP 中，有三种类型的数组：</p><ul><li><strong>数值数组</strong> - 带有数字 ID 键的数组</li><li><strong>关联数组</strong> - 带有指定的键的数组，每个键关联一个值</li><li><strong>多维数组</strong> - 包含一个或多个数组的数组</li></ul><h3 id="数值数组"><a class="header-anchor" href="#数值数组">¶</a>数值数组</h3><p>自动分配 ID 键（ID 键总是从 0 开始）：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</span><br></pre></td></tr></tbody></table></figure><p>人工分配 ID 键：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$cars[<span class="number">0</span>]=<span class="string">"Volvo"</span>;        </span><br><span class="line">$cars[<span class="number">1</span>]=<span class="string">"BMW"</span>;        </span><br><span class="line">$cars[<span class="number">2</span>]=<span class="string">"Toyota"</span>;</span><br></pre></td></tr></tbody></table></figure><p>count() 函数用于返回数组的长度（元素的数量）</p><h3 id="遍历数值数组"><a class="header-anchor" href="#遍历数值数组">¶</a>遍历数值数组</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"Toyota"</span>);</span><br><span class="line">$arrlength=count($cars);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($x=<span class="number">0</span>;$x&lt;$arrlength;$x++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">echo</span> $cars[$x];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Volvo</span></span><br><span class="line"><span class="comment">BMW</span></span><br><span class="line"><span class="comment">Toyota</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h3 id="关联数组"><a class="header-anchor" href="#关联数组">¶</a>关联数组</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这里有两种创建关联数组的方法：    </span><br><span class="line"></span><br><span class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</span><br><span class="line">或者:    </span><br><span class="line"></span><br><span class="line">$age[<span class="string">'Peter'</span>]=<span class="string">"35"</span>;        </span><br><span class="line">$age[<span class="string">'Ben'</span>]=<span class="string">"37"</span>;        </span><br><span class="line">$age[<span class="string">'Joe'</span>]=<span class="string">"43"</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Peter is "</span> . $age[<span class="string">'Peter'</span>] . <span class="string">" years old."</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Peter is 35 years old.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><h3 id="遍历关联数组"><a class="header-anchor" href="#遍历关联数组">¶</a>遍历关联数组</h3><p>使用foreach</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($age <span class="keyword">as</span> $x=&gt;$x_value)</span><br><span class="line">{</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Key="</span> . $x . <span class="string">", Value="</span> . $x_value;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Key=Peter, Value=35</span></span><br><span class="line"><span class="comment">Key=Ben, Value=37</span></span><br><span class="line"><span class="comment">Key=Joe, Value=43</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>foreach的两种语法：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (array_expression <span class="keyword">as</span> $value)</span><br><span class="line">    statement</span><br><span class="line"><span class="keyword">foreach</span> (array_expression <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">    statement</span><br><span class="line">第一种格式遍历给定的 array_expression 数组。每次循环中，当前单元的值被赋给 $value 并且数组内部的指针向前移一步（因此下一次循环中将会得到下一个单元）。</span><br><span class="line"></span><br><span class="line">第二种格式做同样的事，只除了当前单元的键名也会在每次循环中被赋给变量 $key。</span><br></pre></td></tr></tbody></table></figure><h2 id="PHP数组排序"><a class="header-anchor" href="#PHP数组排序">¶</a>PHP数组排序</h2><p>在本章中，我们将一一介绍下列 PHP 数组排序函数：</p><ul><li>sort() - 对数组进行升序排列</li><li>rsort() - 对数组进行降序排列</li><li>asort() - 根据关联数组的值，对数组进行升序排列</li><li>ksort() - 根据关联数组的键，对数组进行升序排列</li><li>arsort() - 根据关联数组的值，对数组进行降序排列</li><li>krsort() - 根据关联数组的键，对数组进行降序排列</li></ul><h2 id="PHP函数"><a class="header-anchor" href="#PHP函数">¶</a>PHP函数</h2><p>在 PHP 中，提供了超过 1000 个内建的函数。</p><p>任何有效的 PHP 代码都有可能出现在函数内部，甚至包括其它函数和类定义。</p><h2 id="PHP面向对象"><a class="header-anchor" href="#PHP面向对象">¶</a>PHP面向对象</h2><p>PHP 定义类通常语法格式如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class phpClass {</span><br><span class="line">  var $var1;</span><br><span class="line">  var $var2 = "constant string";</span><br><span class="line">  </span><br><span class="line">  function myfunc ($arg1, $arg2) {</span><br><span class="line">     [..]</span><br><span class="line">  }</span><br><span class="line">  [..]</span><br><span class="line">}</span><br><span class="line">?&gt;</span><br></pre></td></tr></tbody></table></figure><p>解析如下：</p><ul><li>类使用 <strong>class</strong> 关键字后加上类名定义。</li><li>类名后的一对大括号({})内可以定义变量和方法。</li><li>类的变量使用 <strong>var</strong> 来声明, 变量也可以初始化值。</li><li>函数定义类似 PHP 函数的定义，但函数只能通过该类及其实例化的对象访问。</li></ul><p>一个例子：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>{</span><br><span class="line">  <span class="comment">/* 成员变量 */</span></span><br><span class="line">  <span class="keyword">var</span> $url;</span><br><span class="line">  <span class="keyword">var</span> $title;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 成员函数 */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params">$par</span>)</span>{</span><br><span class="line">     <span class="keyword">$this</span>-&gt;url = $par;</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getUrl</span>(<span class="params"></span>)</span>{</span><br><span class="line">     <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;url . PHP_EOL;</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setTitle</span>(<span class="params">$par</span>)</span>{</span><br><span class="line">     <span class="keyword">$this</span>-&gt;title = $par;</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span>(<span class="params"></span>)</span>{</span><br><span class="line">     <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;title . PHP_EOL;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="构造函数和析构函数"><a class="header-anchor" href="#构造函数和析构函数">¶</a>构造函数和析构函数</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDestructableClass</span> </span>{</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>{</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"构造函数\n"</span>;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;name = <span class="string">"MyDestructableClass"</span>;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>{</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"销毁 "</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">"\n"</span>;</span><br><span class="line">   }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> MyDestructableClass();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day20搜索-小可的机试练习日记</title>
      <link href="2021/07/11/Day20%E6%90%9C%E7%B4%A2-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
      <url>2021/07/11/Day20%E6%90%9C%E7%B4%A2-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>BFS</h1><h2 id="Catch-that-Cow"><a class="header-anchor" href="#Catch-that-Cow">¶</a>Catch that Cow</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day19递归-小可的机试练习日记</title>
      <link href="2021/06/13/Day19%E9%80%92%E5%BD%92-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
      <url>2021/06/13/Day19%E9%80%92%E5%BD%92-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>递归策略</h1><h2 id="n的阶乘"><a class="header-anchor" href="#n的阶乘">¶</a>n的阶乘</h2><p><a href="https://t.cn/Ai0ocOUY">https://t.cn/Ai0ocOUY</a></p><p>看起来是普通递归，但是需要解决结果是大数的问题吗？</p><img src="D:\胡可\博客\blog\source\_posts\Day19递归-小可的机试练习日记.assets\image-20210613101825888.png" alt="image-20210613101825888" style="zoom:67%;" loading="lazy"><p>好像long long 刚好可以放下20的阶乘……</p><p>以后可以这样记：int32位（最大约为<code>2*10^9</code>），long long 64位（最大约为<code>9*10^9</code>）</p><h2 id="汉诺塔3"><a class="header-anchor" href="#汉诺塔3">¶</a>汉诺塔3</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2064">http://acm.hdu.edu.cn/showproblem.php?pid=2064</a></p><p>书上的解释挺不错的！</p><h2 id="杨辉三角形"><a class="header-anchor" href="#杨辉三角形">¶</a>杨辉三角形</h2><p><a href="https://t.cn/Ai0KcLRI">https://t.cn/Ai0KcLRI</a></p><p>分析一下递归的两个条件：</p><ul><li><p>原问题和子问题：打印n的三角形，等价于先打印n-1的三角形，然后再加一行个数为n的数字。</p><p>这行数字的规律：<s>最外围是两个1，次外围是两个n-1，第三层是两个1+…+n-2</s></p><p>直接靠上一行的数字两两相加可以不可以</p></li></ul><hr><p>以上作废，按这个思路写着写着发现出问题了……</p><p>在讨论区找到了很好的题解：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">YangHui</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span><span class="comment">//求杨辉三角形i行j列的元素值</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(j==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(j==i) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> YangHui(i<span class="number">-1</span>, j)+YangHui(i<span class="number">-1</span>, j<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)!=EOF)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++) {</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i; j++) {</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, YangHui(i, j));</span><br><span class="line">                <span class="keyword">if</span>(j!=i) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>思路和我完全不一样，他的函数是用来求杨辉三角形i行j列的元素值的……</p><h2 id="全排列"><a class="header-anchor" href="#全排列">¶</a>全排列</h2><p><a href="https://www.nowcoder.com/practice/5632c23d0d654aecbc9315d1720421c1?tpId=61&amp;tqId=29515&amp;tPage=1&amp;ru=/kaoyan/retest/1002&amp;qru=/ta/pku-kaoyan/question-ranking">https://www.nowcoder.com/practice/5632c23d0d654aecbc9315d1720421c1?tpId=61&amp;tqId=29515&amp;tPage=1&amp;ru=/kaoyan/retest/1002&amp;qru=/ta/pku-kaoyan/question-ranking</a></p><ul><li><p>看到一个很绝的题解（用了stl中的函数）：</p><p>从第一个开始，一直用next_permutation函数获取下一个全排列。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;s) {</span><br><span class="line">        sort(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (s.<span class="built_in">begin</span>(); next_permutation(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());) {</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>或者这样写：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">string</span> s;<span class="built_in">cin</span>&gt;&gt;s;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>){</span><br><span class="line">        sort(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;next_permutation(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());<span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>原来for循环的第一个和第三个位置只要放上要做的事情的语句，也一样是可以执行的……</p><p>这个神奇函数的帖子：<a href="https://blog.csdn.net/HowardEmily/article/details/68064377">https://blog.csdn.net/HowardEmily/article/details/68064377</a></p><p><a href="https://blog.csdn.net/weixin_43325354/article/details/99208140">https://blog.csdn.net/weixin_43325354/article/details/99208140</a></p></li><li><p>dfs递归：</p><p>好难懂呜呜呜</p></li></ul><h1>分治法</h1><h2 id="Fibonacci（上交）"><a class="header-anchor" href="#Fibonacci（上交）">¶</a>Fibonacci（上交）</h2><p><a href="https://www.nowcoder.com/practice/17ad6908e36a49f4b06ea96936e8bb25?tpId=62&amp;tqId=29453&amp;tPage=1&amp;ru=/kaoyan/retest/2002&amp;qru=/ta/sju-kaoyan/question-ranking">https://www.nowcoder.com/practice/17ad6908e36a49f4b06ea96936e8bb25?tpId=62&amp;tqId=29453&amp;tPage=1&amp;ru=/kaoyan/retest/2002&amp;qru=/ta/sju-kaoyan/question-ranking</a></p><p>当n=0，输出0；当n=1，输出1；其他时候往下递归</p><p>题目中说n最大30，所以其实结果int存得下。总体还是挺简单的</p><h2 id="二叉树"><a class="header-anchor" href="#二叉树">¶</a>二叉树</h2><p><a href="https://www.nowcoder.com/practice/f74c7506538b44399f2849eba2f050b5?tpId=61&amp;tqId=29557&amp;tPage=3&amp;ru=/kaoyan/retest/1002&amp;qru=/ta/pku-kaoyan/question-ranking">https://www.nowcoder.com/practice/f74c7506538b44399f2849eba2f050b5?tpId=61&amp;tqId=29557&amp;tPage=3&amp;ru=/kaoyan/retest/1002&amp;qru=/ta/pku-kaoyan/question-ranking</a></p><p>这递归出口还真不好找，至少我看题没有一下想出来</p><img src="D:\胡可\博客\blog\source\_posts\Day19递归-小可的机试练习日记.assets\image-20210711185832847.png" alt="image-20210711185832847" style="zoom:50%;" loading="lazy"><p>参考一下书上的做法：从m开始的节点数，等于m左子树的节点数，加上右子树的节点数，再加1（m本身）</p><p>递归出口：当遇到某一个m&gt;n，代表此m节点还不在二叉树中，所以节点数为0</p><p>注意表达左右子树的方法：<code>m*2</code>和<code>m*2+1</code></p><h2 id="2的幂次方（跳过，感觉有点难）"><a class="header-anchor" href="#2的幂次方（跳过，感觉有点难）">¶</a>2的幂次方（跳过，感觉有点难）</h2><p><a href="https://www.nowcoder.com/practice/7cf7b0706d7e4b439481f53e5fdac6e7?tpId=62&amp;tqId=29460&amp;tPage=1&amp;ru=/kaoyan/retest/2002&amp;qru=/ta/sju-kaoyan/question-ranking">https://www.nowcoder.com/practice/7cf7b0706d7e4b439481f53e5fdac6e7?tpId=62&amp;tqId=29460&amp;tPage=1&amp;ru=/kaoyan/retest/2002&amp;qru=/ta/sju-kaoyan/question-ranking</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day18区间贪心-小可的机试练习日记</title>
      <link href="2021/06/12/Day18%E5%8C%BA%E9%97%B4%E8%B4%AA%E5%BF%83-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
      <url>2021/06/12/Day18%E5%8C%BA%E9%97%B4%E8%B4%AA%E5%BF%83-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="今年暑假不AC"><a class="header-anchor" href="#今年暑假不AC">¶</a>今年暑假不AC</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2037">http://acm.hdu.edu.cn/showproblem.php?pid=2037</a></p><h3 id="思路"><a class="header-anchor" href="#思路">¶</a>思路</h3><p>目前我还没了解过区间贪心。</p><p>如果我尽量选节目时长短的，算是一种策略吗？或者借助上次简单贪心中那个代理和服务器的思想，定好起点，每次选离起点最近且时长最短的；然后将起点更新到这个节目结束之后……</p><p>但是我觉得这只是局部最优啊</p><hr><p>看了下书，其实选开始时间最早和时长最短都不能最优，应该<strong>选结束时间最早</strong>！</p><p>所以按照结束时间的早晚给节目排序……然后大概就懂了！</p><h2 id="Case-of-Fugitive（未解决）"><a class="header-anchor" href="#Case-of-Fugitive（未解决）">¶</a>Case of Fugitive（未解决）</h2><p><a href="https://codeforces.com/problemset/problem/555/B">https://codeforces.com/problemset/problem/555/B</a></p><h3 id="题意"><a class="header-anchor" href="#题意">¶</a>题意</h3><p>AA是著名的侦探，现在在某星球追犯人。这个星球几乎都是水。</p><p>唯一的陆地，就是n个排成一列的小岛。我们把它们简化成一条直线上不相交的线段。第i个岛的范围是[li, ri]，且ri&lt;li+1</p><p>AA需要在每两个相邻的岛之间搭桥，如果两个岛上长度足够（其实就是第i个岛的r到第i+1个岛的l之间足够a，且l-&gt;r又不超过a），就可以搭建一个长度为a的桥。</p><p>侦探有m座桥梁，每座桥长度不同，每座桥最多可以用一次，帮他判断是否这m座桥足够可以帮他连接每一对相邻的岛屿。</p><h3 id="思路-v2"><a class="header-anchor" href="#思路-v2">¶</a>思路</h3><p>有点复杂，看看书吧</p><hr><p>看完以后我觉得，贪心有一个关键，就是对某个东西的某个属性去排序，然后按照顺序依次取用……</p><p>那么这里是考察两岛之间的距离还是桥的长度呢</p><ul><li>两岛之间的距离：按两岛之间的距离排序，最小的放最小的桥……不对！……………………</li><li>桥的长度：按桥的长度从小到大排序，将所有距离按min排序。对于某一个桥，找到min小于它的那些，在这些中选max最小的（因为之后又比此桥更大的桥，所有max较大的要留给别人）</li></ul><hr><p>写了一半，思路有点乱，还是看书学习一下吧</p><p>定义MAXN的时候要加1！！</p><p>比如：#define MAXN 200001</p><p>其实我觉得书上的题解不是很好理解，而且我不记得我什么时候学过在结构体里面定义函数的操作呀</p><hr><p>学了优先队列再来看吧</p><h2 id="To-Fill-or-Not-to-Fill（略难）"><a class="header-anchor" href="#To-Fill-or-Not-to-Fill（略难）">¶</a>To Fill or Not to Fill（略难）</h2><p><a href="https://www.nowcoder.com/practice/f7eba38f7cd24c45982831e0f38518f9?tpId=63&amp;tqId=29602&amp;tPage=2&amp;ru=/kaoyan/retest/9001&amp;qru=/ta/zju-kaoyan/question-ranking">https://www.nowcoder.com/practice/f7eba38f7cd24c45982831e0f38518f9?tpId=63&amp;tqId=29602&amp;tPage=2&amp;ru=/kaoyan/retest/9001&amp;qru=/ta/zju-kaoyan/question-ranking</a></p><h3 id="题意-v2"><a class="header-anchor" href="#题意-v2">¶</a>题意</h3><p>有了高速公路，从杭州到其他城市容易多了。由于车的邮箱是有限的，所以要在路上找加油站。不同的加油站油价不同。目标是花费最少。</p><ul><li><p>输入：</p><p>每个case，第一行有4个正数：</p><ul><li>Cmax：邮箱最大容量</li><li>D：杭州和目标地的距离</li><li>Davg：每单位汽油能支撑汽车走的距离</li><li>N：加油站数量</li></ul><p>然后跟了N行，每行有一对非负数：Pi表示汽油单价；Di表示这个站到杭州的距离</p></li><li><p>输出：</p><p>对于每个case，保留两位小数打印最便宜的花费。</p><p>假设最开始油箱是空的。</p><p>如果能到达终点，打印“…”，X是车能跑的最大距离（两位小数）</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day17简单贪心-小可的机试练习日记</title>
      <link href="2021/06/11/Day17%E7%AE%80%E5%8D%95%E8%B4%AA%E5%BF%83-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
      <url>2021/06/11/Day17%E7%AE%80%E5%8D%95%E8%B4%AA%E5%BF%83-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>贪心不一定能收敛到全局最优解，但是对于某些问题，局部最优就是全局最优</p><p>——这样的问题是无后效性的，每个状态以前的过程不会影响以后的状态</p><h1>简单贪心</h1><h2 id="鸡兔同笼"><a class="header-anchor" href="#鸡兔同笼">¶</a>鸡兔同笼</h2><p><a href="https://www.nowcoder.com/practice/fda725b4d9a14010bb145272cababef1?tpId=61&amp;tqId=29559&amp;tPage=3&amp;ru=/kaoyan/retest/1002&amp;qru=/ta/pku-kaoyan/question-ranking">https://www.nowcoder.com/practice/fda725b4d9a14010bb145272cababef1?tpId=61&amp;tqId=29559&amp;tPage=3&amp;ru=/kaoyan/retest/1002&amp;qru=/ta/pku-kaoyan/question-ranking</a></p><p>题目很简单，但是我还是有些没考虑到的：</p><ul><li>a为偶数才有解，否则要输出0 0</li><li>求最小的时候，不够一只兔子了，剩下的两条一定是鸡的（不会出现这两条没人认领的情况呀！）</li></ul><p>体现的贪心的地方：求最小的时候，先考虑脚多的兔子</p><h2 id="FatMouse’-Trade"><a class="header-anchor" href="#FatMouse’-Trade">¶</a>FatMouse’ Trade</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1009">http://acm.hdu.edu.cn/showproblem.php?pid=1009</a></p><h3 id="题意"><a class="header-anchor" href="#题意">¶</a>题意</h3><p>老鼠有M磅事物，要和管仓库的猫猫交易，仓库里有老鼠最爱的食物——JavaBean</p><p>仓库有N个房间，第i个房间J[i]磅Bean，需要拿F[i]磅猫粮去换</p><p>老鼠不需要拿到一个房间所有的Bean，可以用<code>F[i]*a%换J[i]*a%</code>的</p><p>让你求老鼠能拿到的最多的Bean数量</p><h3 id="思路"><a class="header-anchor" href="#思路">¶</a>思路</h3><p>我觉得应该先拿J/F最高的房间的？</p><h3 id="错误"><a class="header-anchor" href="#错误">¶</a>错误</h3><p><a href="https://zhuanlan.zhihu.com/p/357362845">https://zhuanlan.zhihu.com/p/357362845</a></p><p>搜了下map的自定义排序，略难用啊……<a href="https://blog.csdn.net/qq_43152052/article/details/101039853">https://blog.csdn.net/qq_43152052/article/details/101039853</a></p><p>我打算把map转成元素为pair的vector</p><p>pair用法：<a href="https://blog.csdn.net/sevenjoin/article/details/81937695">https://blog.csdn.net/sevenjoin/article/details/81937695</a></p><ul><li><p>关于输入</p><p>用<code>scanf("%f  %f",&amp;a,&amp;b);</code>来输入好像会出错</p></li><li><p>TLE：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">double</span>&gt; p1,<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">double</span>&gt; p2)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(p1.second&gt;p2.second){</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line"><span class="keyword">int</span> M,N;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;M&gt;&gt;N){</span><br><span class="line"><span class="keyword">if</span>(M==<span class="number">-1</span>&amp;&amp;N==<span class="number">-1</span>){</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> J[MAXN],F[MAXN];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++){</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;J[i]&gt;&gt;F[i];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">double</span>&gt; &gt; v;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">double</span>&gt; &gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++){</span><br><span class="line">v.push_back(<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">double</span>&gt;(i,J[i]/F[i]));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//降排列 </span></span><br><span class="line">sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),compare);</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> left=(<span class="keyword">double</span>)M;</span><br><span class="line"><span class="keyword">double</span> food=<span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span>(it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="comment">//如果需要的猫粮小于老鼠拥有的猫粮，可以换走这个房间所有的食物 </span></span><br><span class="line"><span class="keyword">if</span>(F[it-&gt;first]&lt;=left){</span><br><span class="line">left-=F[it-&gt;first];</span><br><span class="line">food+=J[it-&gt;first];</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">double</span> a=left/F[it-&gt;first];</span><br><span class="line">food+=J[it-&gt;first]*a;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">} </span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3f\n"</span>,food);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我改了一版，之前好像忘记把left置0了，但还是TLE：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>()&amp;&amp;left&gt;<span class="number">0.0</span>;it++){</span><br><span class="line"><span class="comment">//如果需要的猫粮小于老鼠拥有的猫粮，可以换走这个房间所有的食物 </span></span><br><span class="line"><span class="keyword">if</span>(F[it-&gt;first]&lt;=left){</span><br><span class="line">left-=F[it-&gt;first];</span><br><span class="line">food+=J[it-&gt;first];</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">double</span> a=left/F[it-&gt;first];</span><br><span class="line">left=<span class="number">0.0</span>;<span class="comment">//left清零~ </span></span><br><span class="line">food+=J[it-&gt;first]*a;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">} </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>后来仔细想了一下，其实不用置0，因为已经break了</p><p>问题原来在于：</p><p><img src="D:%5C%E8%83%A1%E5%8F%AF%5C%E5%8D%9A%E5%AE%A2%5Cblog%5Csource_posts%5CDay17%E7%AE%80%E5%8D%95%E8%B4%AA%E5%BF%83-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0.assets%5Cimage-20210611122641861.png" alt="image-20210611122641861" loading="lazy"></p><p>这是1000！不是100！长点眼睛吧~~</p><p>改成<code>#define MAXN 1000</code>就可以了……</p></li></ul><h2 id="Senior’s-Gun"><a class="header-anchor" href="#Senior’s-Gun">¶</a>Senior’s Gun</h2><h3 id="题意-v2"><a class="header-anchor" href="#题意-v2">¶</a>题意</h3><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5281">http://acm.hdu.edu.cn/showproblem.php?pid=5281</a></p><p>女主xjj，有n把枪，每把的攻击力是a[i]</p><p>有天女主遇到m个怪兽，每个怪兽的防御力是b[j]</p><p>当b[j]&lt;a[i]时，xjj可以用第i把枪kill第j个怪兽，并得到a[i]-b[j]的分数</p><p>规定每把枪至多用一次，求xjj能得到的最大分数（不需要kill所有monster）</p><img src="D:\胡可\博客\blog\source\_posts\Day17简单贪心-小可的机试练习日记.assets\image-20210611123154073.png" alt="image-20210611123154073" style="zoom:67%;" loading="lazy"><h3 id="思路-v2"><a class="header-anchor" href="#思路-v2">¶</a>思路</h3><p>a,b的范围还挺大的……试下longlong</p><p>分数最大，即a[i]-b[j]最大，所以我们应该用攻击力最大的枪打防御力最低的怪兽？（虽然直觉上有点浪费）</p><p>居然就这样过了……虽然900ms差点超时：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> one,<span class="keyword">int</span> two)</span></span>{</span><br><span class="line"><span class="keyword">return</span> one&gt;two;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line"><span class="keyword">int</span> n,m,T;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[MAXN],b[MAXN];</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--){</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++){</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b[j];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//给攻击力降序排列</span></span><br><span class="line">sort(a,a+n,compare); </span><br><span class="line"><span class="comment">//给防御力升序排列 </span></span><br><span class="line">sort(b,b+m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">min</span>(n,m);i++){</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;b[i]){</span><br><span class="line">sum+=a[i]-b[i];</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>看了下书上的做法，和我也差不多</p><p>科普一下：对于long long的printf输出：<code>printf("lld\n",answer);</code></p><h2 id="代理服务器"><a class="header-anchor" href="#代理服务器">¶</a>代理服务器</h2><p><a href="http://t.cn/E9emuS9">http://t.cn/E9emuS9</a></p><h3 id="思路-v3"><a class="header-anchor" href="#思路-v3">¶</a>思路</h3><p>有点没思路，只是隐约觉得：与“每个代理的IP出现在访问顺序中的位置”有关，其他的就有点理不清了。</p><p>找了下评论区的思路，有个和我差不多的：</p><blockquote><p>基本的贪心思想，因为要访问的全部server列表及顺序已经给定，并且ip可以多次重复选择，所以，每次只要选择能访问最远的ip地址进行访问，再从断点开始换下一个能访问最远的ip，如此便可得最优解。</p></blockquote><p>原来我没想到的是<strong>断点</strong>这个词啊！</p><p>整理一下思路：每次在余下的列表中找每个代理IP第一次出现的位置，选最远的。</p><h3 id="错误-v2"><a class="header-anchor" href="#错误-v2">¶</a>错误</h3><ul><li><p>超时：</p><img src="D:\胡可\博客\blog\source\_posts\Day17简单贪心-小可的机试练习日记.assets\image-20210611131338908.png" alt="image-20210611131338908" style="zoom: 50%;" loading="lazy"><p>对应的代码：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 5000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> one,<span class="keyword">int</span> two)</span></span>{</span><br><span class="line"><span class="keyword">return</span> one&gt;two;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n){</span><br><span class="line"><span class="built_in">string</span> proxy[MAXN];</span><br><span class="line"><span class="keyword">int</span> occur[MAXN];</span><br><span class="line"><span class="built_in">string</span> server[MAXM];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;proxy[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++){</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;server[i];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index=<span class="number">0</span>;<span class="comment">//记录访问列表断点位置</span></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;<span class="comment">//记录切换次数 </span></span><br><span class="line"><span class="keyword">while</span>(index&lt;m){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">occur[i]=<span class="built_in">find</span>(server+index,server+m,proxy[i])-(server+index);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//给出现位置降序排列 </span></span><br><span class="line">sort(occur,occur+n,compare);</span><br><span class="line">index+=occur[<span class="number">0</span>]; </span><br><span class="line">count++; </span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;count<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>没过的用例：</p><p>输入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">17.151.164.96</span><br><span class="line">10</span><br><span class="line">17.151.164.96</span><br><span class="line">17.151.164.96</span><br><span class="line">17.151.164.96</span><br><span class="line">17.151.164.96</span><br><span class="line">17.151.164.96</span><br><span class="line">17.151.164.96</span><br><span class="line">17.151.164.96</span><br><span class="line">17.151.164.96</span><br><span class="line">17.151.164.96</span><br><span class="line">17.151.164.96</span><br></pre></td></tr></tbody></table></figure><p>预期输出：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></tbody></table></figure></li></ul><p>而我实际没有输出……因为卡住了，index更新不了</p><p>原来是忘了没有解的情况！！！总忘记！！！</p><p>所以可以特殊处理一下只有一个代理IP的情况。</p><hr><p>过了哈哈哈哈，开心心，吃午饭去！</p><h3 id="学习"><a class="header-anchor" href="#学习">¶</a>学习</h3><p>algorithm的find函数用在普通数组上，没找到的话返回的是什么？</p><img src="D:\胡可\博客\blog\source\_posts\Day17简单贪心-小可的机试练习日记.assets\image-20210611132814823.png" alt="image-20210611132814823" style="zoom:67%;" loading="lazy"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day16高精度整数-小可的机试练习日记</title>
      <link href="2021/06/08/Day16%E9%AB%98%E7%B2%BE%E5%BA%A6%E6%95%B4%E6%95%B0-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
      <url>2021/06/08/Day16%E9%AB%98%E7%B2%BE%E5%BA%A6%E6%95%B4%E6%95%B0-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>高精度整数</h1><p>书上有一个很长很长的板子，实现了各种运算</p><ul><li><p>敲了很久很久的珍贵板子：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高精度整数板子</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">10000</span>;<span class="comment">//最多多少位</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BigInteger</span>{</span></span><br><span class="line"><span class="keyword">int</span> digit[MAXN];</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数 </span></span><br><span class="line">BigInteger();</span><br><span class="line">BigInteger(<span class="keyword">int</span> x);</span><br><span class="line">BigInteger(<span class="built_in">string</span> str);</span><br><span class="line">BigInteger(<span class="keyword">const</span> BigInteger&amp; b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值函数</span></span><br><span class="line">BigInteger <span class="keyword">operator</span>=(<span class="keyword">int</span> x); </span><br><span class="line">BigInteger <span class="keyword">operator</span>=(<span class="built_in">string</span> str);</span><br><span class="line">BigInteger <span class="keyword">operator</span>=(<span class="keyword">const</span> BigInteger&amp; b); </span><br><span class="line"></span><br><span class="line"><span class="comment">//比大小</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> BigInteger&amp; b); </span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> BigInteger&amp; b); </span><br><span class="line"></span><br><span class="line"><span class="comment">//运算符</span></span><br><span class="line">BigInteger <span class="keyword">operator</span>+(<span class="keyword">const</span> BigInteger&amp; b); </span><br><span class="line">BigInteger <span class="keyword">operator</span>-(<span class="keyword">const</span> BigInteger&amp; b); </span><br><span class="line">BigInteger <span class="keyword">operator</span>*(<span class="keyword">const</span> BigInteger&amp; b); </span><br><span class="line">BigInteger <span class="keyword">operator</span>/(<span class="keyword">const</span> BigInteger&amp; b); </span><br><span class="line">BigInteger <span class="keyword">operator</span>%(<span class="keyword">const</span> BigInteger&amp; b); </span><br><span class="line"></span><br><span class="line"><span class="comment">//输入输出</span></span><br><span class="line"><span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; in, BigInteger&amp; x);</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="keyword">const</span> BigInteger&amp; x); </span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数 </span></span><br><span class="line">BigInteger::BigInteger(){</span><br><span class="line"><span class="built_in">memset</span>(digit,<span class="number">0</span>,<span class="keyword">sizeof</span>(digit));</span><br><span class="line">length=<span class="number">0</span>;<span class="comment">//初始化 </span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">BigInteger::BigInteger(<span class="keyword">int</span> x){</span><br><span class="line"><span class="built_in">memset</span>(digit,<span class="number">0</span>,<span class="keyword">sizeof</span>(digit));</span><br><span class="line">length=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x=0要分开处理，因为它进不去while </span></span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>){</span><br><span class="line">digit[length++]=x;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(x!=<span class="number">0</span>){</span><br><span class="line">digit[length++]=x%<span class="number">10</span>;<span class="comment">//索引小的存的是低位，倒过来了 </span></span><br><span class="line">x/=<span class="number">10</span>; </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">BigInteger::BigInteger(<span class="built_in">string</span> str){</span><br><span class="line"><span class="built_in">memset</span>(digit,<span class="number">0</span>,<span class="keyword">sizeof</span>(digit));</span><br><span class="line">length=str.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++){</span><br><span class="line">digit[i]=str[length-i<span class="number">-1</span>]-<span class="string">'0'</span>;<span class="comment">//也是倒着存 </span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">BigInteger::BigInteger(<span class="keyword">const</span> BigInteger&amp; b){</span><br><span class="line"><span class="built_in">memset</span>(digit,<span class="number">0</span>,<span class="keyword">sizeof</span>(digit));</span><br><span class="line">length=b.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++){</span><br><span class="line">digit[i]=b.digit[i];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值函数</span></span><br><span class="line">BigInteger BigInteger::<span class="keyword">operator</span>=(<span class="keyword">int</span> x){</span><br><span class="line"><span class="built_in">memset</span>(digit,<span class="number">0</span>,<span class="keyword">sizeof</span>(digit));</span><br><span class="line">length=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x=0要分开处理，因为它进不去while </span></span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>){</span><br><span class="line">digit[length++]=x;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(x!=<span class="number">0</span>){</span><br><span class="line">digit[length++]=x%<span class="number">10</span>;<span class="comment">//索引小的存的是低位，倒过来了 </span></span><br><span class="line">x/=<span class="number">10</span>; </span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">BigInteger BigInteger::<span class="keyword">operator</span>=(<span class="built_in">string</span> str){</span><br><span class="line"><span class="built_in">memset</span>(digit,<span class="number">0</span>,<span class="keyword">sizeof</span>(digit));</span><br><span class="line">length=str.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++){</span><br><span class="line">digit[i]=str[length-i<span class="number">-1</span>]-<span class="string">'0'</span>;<span class="comment">//也是倒着存 </span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">BigInteger BigInteger::<span class="keyword">operator</span>=(<span class="keyword">const</span> BigInteger&amp; b){</span><br><span class="line"><span class="built_in">memset</span>(digit,<span class="number">0</span>,<span class="keyword">sizeof</span>(digit));</span><br><span class="line">length=b.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++){</span><br><span class="line">digit[i]=b.digit[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//比大小</span></span><br><span class="line"><span class="keyword">bool</span> BigInteger::<span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> BigInteger&amp; b){</span><br><span class="line"><span class="keyword">if</span>(length&lt;b.length){</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(b.length&lt;length){</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=length<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--){</span><br><span class="line"><span class="keyword">if</span>(digit[i]==b.digit[i]){</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">return</span> digit[i]&lt;b.digit[i];<span class="comment">//妙啊！ </span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//相等返回true </span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> BigInteger::<span class="keyword">operator</span>==(<span class="keyword">const</span> BigInteger&amp; b){</span><br><span class="line"><span class="keyword">if</span>(length!=b.length){</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=length<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--){</span><br><span class="line"><span class="keyword">if</span>(digit[i]!=b.digit[i]){</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//运算符</span></span><br><span class="line">BigInteger BigInteger::<span class="keyword">operator</span>+(<span class="keyword">const</span> BigInteger&amp; b){</span><br><span class="line">BigInteger answer;</span><br><span class="line"><span class="keyword">int</span> carry=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length||i&lt;b.length;i++){<span class="comment">//i与较长的length保持一致 </span></span><br><span class="line"><span class="keyword">int</span> current=carry+digit[i]+b.digit[i];</span><br><span class="line">carry=current/<span class="number">10</span>;</span><br><span class="line">answer.digit[answer.length++]=current%<span class="number">10</span>; </span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(carry!=<span class="number">0</span>){<span class="comment">//还要多一位 </span></span><br><span class="line">answer.digit[answer.length++]=carry;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">BigInteger BigInteger::<span class="keyword">operator</span>-(<span class="keyword">const</span> BigInteger&amp; b){</span><br><span class="line">BigInteger answer;</span><br><span class="line"><span class="keyword">int</span> carry=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++){</span><br><span class="line"><span class="keyword">int</span> current=digit[i]-b.digit[i]-carry;</span><br><span class="line"><span class="keyword">if</span>(current&lt;<span class="number">0</span>){<span class="comment">//要借位 </span></span><br><span class="line">current+=<span class="number">10</span>;</span><br><span class="line">carry=<span class="number">1</span>; </span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">carry=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">answer.digit[answer.length++]=current;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去掉多余的0 </span></span><br><span class="line"><span class="keyword">while</span>(answer.digit[answer.length]==<span class="number">0</span>&amp;&amp;answer.length&gt;<span class="number">1</span>){</span><br><span class="line">answer.length--;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> answer; </span><br><span class="line">} </span><br><span class="line"></span><br><span class="line">BigInteger BigInteger::<span class="keyword">operator</span>*(<span class="keyword">const</span> BigInteger&amp; b){</span><br><span class="line">BigInteger answer;</span><br><span class="line">answer.length=length+b.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b.length;j++){</span><br><span class="line">answer.digit[i+j]+=digit[i]*b.digit[j];<span class="comment">//这个i+j就很自然地实现了乘法，但是还没进位 </span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;answer.length;i++){</span><br><span class="line">answer.digit[i+<span class="number">1</span>]+=answer.digit[i]/<span class="number">10</span>;</span><br><span class="line">answer.digit[i]%=<span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(answer.digit[answer.length]==<span class="number">0</span>&amp;&amp;answer.length&gt;<span class="number">1</span>){</span><br><span class="line">answer.length--;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line">BigInteger BigInteger::<span class="keyword">operator</span>/(<span class="keyword">const</span> BigInteger&amp; b){</span><br><span class="line">BigInteger answer;</span><br><span class="line">answer.length=length;</span><br><span class="line">BigInteger remainder=<span class="number">0</span>;<span class="comment">//余数 </span></span><br><span class="line">BigInteger temp=b;<span class="comment">//除数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=length<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--){<span class="comment">//从高位除起 </span></span><br><span class="line"><span class="keyword">if</span>(!(remainder.length==<span class="number">1</span>&amp;&amp;remainder.digit[<span class="number">0</span>]==<span class="number">0</span>)){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=remainder.length<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--){</span><br><span class="line">remainder.digit[j+<span class="number">1</span>]=remainder.digit[j];</span><br><span class="line">}</span><br><span class="line">remainder.length++;</span><br><span class="line">}</span><br><span class="line">remainder.digit[<span class="number">0</span>]=digit[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于除法 </span></span><br><span class="line"><span class="keyword">while</span>(temp&lt;=remainder){</span><br><span class="line">remainder=remainder-temp;</span><br><span class="line">answer.digit[i]++; </span><br><span class="line">} </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(answer.digit[answer.length]==<span class="number">0</span>&amp;&amp;answer.length&gt;<span class="number">1</span>){</span><br><span class="line">answer.length--;</span><br><span class="line">} </span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line">BigInteger BigInteger::<span class="keyword">operator</span>%(<span class="keyword">const</span> BigInteger&amp; b){</span><br><span class="line">BigInteger remainder=<span class="number">0</span>;<span class="comment">//余数 </span></span><br><span class="line">BigInteger temp=b;<span class="comment">//除数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=length<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--){<span class="comment">//从高位除起 </span></span><br><span class="line"><span class="keyword">if</span>(!(remainder.length==<span class="number">1</span>&amp;&amp;remainder.digit[<span class="number">0</span>]==<span class="number">0</span>)){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=remainder.length<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--){</span><br><span class="line">remainder.digit[j+<span class="number">1</span>]=remainder.digit[j];</span><br><span class="line">}</span><br><span class="line">remainder.length++;</span><br><span class="line">}</span><br><span class="line">remainder.digit[<span class="number">0</span>]=digit[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于除法 </span></span><br><span class="line"><span class="keyword">while</span>(temp&lt;=remainder){</span><br><span class="line">remainder=remainder-temp;</span><br><span class="line">} </span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> remainder;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入输出</span></span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; in, BigInteger&amp; x){</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line">in&gt;&gt;str;</span><br><span class="line">x=str;</span><br><span class="line"><span class="keyword">return</span> in;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="keyword">const</span> BigInteger&amp; x){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x.length<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--){</span><br><span class="line">out&lt;&lt;x.digit[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">}</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="a-b（华科）"><a class="header-anchor" href="#a-b（华科）">¶</a>a+b（华科）</h2><p><a href="http://t.cn/AipaWiSG">http://t.cn/AipaWiSG</a></p><h3 id="错误"><a class="header-anchor" href="#错误">¶</a>错误</h3><ul><li><p>‘stdistream&amp; BigIntegermoperator&gt; &gt;(stdistream&amp;, BigInteger&amp;)"’ must take exactly one argument</p><p><a href="https://stackoverflow.com/questions/10744787/operator-must-take-exactly-one-argument">https://stackoverflow.com/questions/10744787/operator-must-take-exactly-one-argument</a></p><p>应该把它放在类外面，书上写的是结构体（所以可以放里面）</p><p>改了也不太对……我还是照书上的用struct吧</p></li><li><p>过了样例但是：段错误:您的程序发生段错误，可能是数组越界，堆栈溢出（比如，递归调用层数太多）等情况引起</p><p>改了MAXN的大小，还是错……</p><p>晚上脑子有点不清醒，明天看看吧</p></li><li><p>破案了，原来是少了个return *this</p></li></ul><h2 id="N的阶乘"><a class="header-anchor" href="#N的阶乘">¶</a>N的阶乘</h2><p><a href="http://t.cn/AipaBKQJ">http://t.cn/AipaBKQJ</a></p><p>经典风格：题目简单，坑多多的</p><p>要求阶乘的这个数本身不大（0-1000），int就装得下</p><p>我和书上敲的一模一样，不知道为啥错……</p><p>网上找了个：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> result[<span class="number">20001</span>] = {<span class="number">0</span>};<span class="comment">//结果</span></span><br><span class="line">result[<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">1</span>;<span class="comment">//记录最高位的后一位下标</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)<span class="comment">//阶乘</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;<span class="comment">//用于进位</span></span><br><span class="line"><span class="comment">//按位相乘，可以将这当作一个模板，很多大数运算都可以按照这种思路来做</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; index; ++j)</span><br><span class="line">{</span><br><span class="line">temp += result[j] * i;</span><br><span class="line">result[j] = temp % <span class="number">10</span>;</span><br><span class="line">temp /= <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(temp)<span class="comment">//判断最高位有没有进位</span></span><br><span class="line">{</span><br><span class="line">result[index++] = temp % <span class="number">10</span>;</span><br><span class="line">temp /= <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = index<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)<span class="comment">//输出结果</span></span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; result[i];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>牢记模板！！</p><h2 id="数字阶梯求和"><a class="header-anchor" href="#数字阶梯求和">¶</a>数字阶梯求和</h2><p><a href="http://t.cn/Aipak8BQ">http://t.cn/Aipak8BQ</a></p><p>这道题最开始理解错了，还以为是n个a相乘……但其实只是拼起来</p><p>这道题的思路还挺巧妙的，并不是按照题目意思去构造出每一个加数；</p><p>而是从另一个角度想：</p><p>这样的序列加起来，个位数上加了n个a；十位数上加了n-1个a</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line"><span class="keyword">int</span> a,n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;n){</span><br><span class="line"><span class="keyword">int</span> sum[MAXN]={<span class="number">0</span>};<span class="comment">//结果最多有n+1位 </span></span><br><span class="line"><span class="keyword">int</span> carry=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">1</span>;i++){</span><br><span class="line"><span class="keyword">int</span> current=(a*(n-i)+carry);</span><br><span class="line">sum[i]=current%<span class="number">10</span>;</span><br><span class="line">carry=current/<span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> length=n;</span><br><span class="line"><span class="keyword">while</span>(sum[length]==<span class="number">0</span>&amp;&amp;length&gt;<span class="number">0</span>){</span><br><span class="line">length--;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=length;i&gt;=<span class="number">0</span>;i--){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,sum[i]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">} </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>自己写出来啦！注意一下length&gt;0这个，有时候搞不清就多试几次，多调几次</p><h2 id="大整数的因子"><a class="header-anchor" href="#大整数的因子">¶</a>大整数的因子</h2><p><a href="http://t.cn/AipaFCJE">http://t.cn/AipaFCJE</a></p><p>大数取模，和大数乘法有相似之处，高位取模，然后乘10加下一位，继续取模</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day15快速幂、矩阵与矩阵快速幂-小可的机试练习日记</title>
      <link href="2021/05/19/Day15%E5%BF%AB%E9%80%9F%E5%B9%82%E3%80%81%E7%9F%A9%E9%98%B5%E4%B8%8E%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
      <url>2021/05/19/Day15%E5%BF%AB%E9%80%9F%E5%B9%82%E3%80%81%E7%9F%A9%E9%98%B5%E4%B8%8E%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>快速幂</h1><p>书上还是讲的挺明白的，这里总结一下：</p><img src="https://raw.githubusercontent.com/Crestiny/BlogImgBed/main/img/image-20210519174457877.png" alt="image-20210519174457877" style="zoom: 40%;" loading="lazy"><h2 id="人见人爱A-B（较难）"><a class="header-anchor" href="#人见人爱A-B（较难）">¶</a>人见人爱A^B（较难）</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2035">http://acm.hdu.edu.cn/showproblem.php?pid=2035</a></p><ul><li>错误：没运行出来……</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">binary</span><span class="params">(<span class="keyword">int</span> B)</span></span>{</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line"><span class="keyword">while</span>(B!=<span class="number">0</span>){</span><br><span class="line">result.push_back(B%<span class="number">2</span>);</span><br><span class="line">B/=<span class="number">2</span>;</span><br><span class="line">} </span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line"><span class="keyword">int</span> A,B;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;A&gt;&gt;B){</span><br><span class="line"><span class="keyword">if</span>(A==<span class="number">0</span>&amp;&amp;B==<span class="number">0</span>){</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; binB=binary(B);</span><br><span class="line"><span class="keyword">int</span> base=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> base_index;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; factor;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;binB.<span class="built_in">size</span>();i++){</span><br><span class="line"><span class="keyword">if</span>(binB[i]!=<span class="number">0</span>){</span><br><span class="line"><span class="keyword">if</span>(base==<span class="number">0</span>){<span class="comment">//如果这是第一个 </span></span><br><span class="line">factor.push_back((<span class="keyword">int</span>)<span class="built_in">pow</span>(A,i)%<span class="number">1000</span>);</span><br><span class="line">base=(<span class="keyword">int</span>)<span class="built_in">pow</span>(A,i)%<span class="number">1000</span>;</span><br><span class="line">base_index=i;</span><br><span class="line">}<span class="keyword">else</span>{<span class="comment">//如果不是第一个，就要基于base来计算 </span></span><br><span class="line"><span class="keyword">int</span> temp=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i/base_index--){</span><br><span class="line">temp*=base;</span><br><span class="line">}</span><br><span class="line">factor.push_back(temp%<span class="number">1000</span>);</span><br><span class="line">base=temp%<span class="number">1000</span>;</span><br><span class="line">base_index=i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;factor.<span class="built_in">size</span>();i++){</span><br><span class="line">ans*=factor[i];</span><br><span class="line">ans=ans%<span class="number">1000</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>学习</p><p>看看书上的答案吧</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FastExponentiation</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> mod)</span></span>{</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b!=<span class="number">0</span>){</span><br><span class="line"><span class="keyword">if</span>(b%<span class="number">2</span>==<span class="number">1</span>){<span class="comment">//如果是1，代表这一位的下标k，算出来的2^k，这个值是快速幂分解的指数之一，也就是a^(2^k)</span></span><br><span class="line">ans*=a;</span><br><span class="line">ans%=mod;</span><br><span class="line">}</span><br><span class="line">b/=<span class="number">2</span>;</span><br><span class="line">a*=a;<span class="comment">//a一直在自平方，直到累乘到现在的a是快速幂分解的因子之一，就在下一轮被ans乘起来</span></span><br><span class="line">a%=mod;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure><p>说实话，看不太懂……</p><p>果然万事还是要动笔，动笔以后我好像有点懂了：</p><img src="https://raw.githubusercontent.com/Crestiny/BlogImgBed/main/img/image-20210519185601843.png" alt="image-20210519185601843" style="zoom: 33%;" loading="lazy"><h2 id="求root-N-k-（难，重要）"><a class="header-anchor" href="#求root-N-k-（难，重要）">¶</a>求root(N,k)（难，重要）</h2><p><a href="http://t.cn/AipAw4B1">http://t.cn/AipAw4B1</a></p><p>研究了一下，我觉得这道题妙在两个地方：</p><ul><li>沿袭了清华一贯的风格——题目虽短，杀伤力却不少</li><li>需要先数学推导出一个结论再继续，不是直接莽的……</li><li>用到了<strong>快速幂取模</strong>算法</li></ul><h3 id="快速幂取模算法"><a class="header-anchor" href="#快速幂取模算法">¶</a>快速幂取模算法</h3><p>参考博客：<a href="https://blog.csdn.net/ltyqljhwcm/article/details/53043646">https://blog.csdn.net/ltyqljhwcm/article/details/53043646</a></p><p>算法的数学原理：</p><img src="https://raw.githubusercontent.com/Crestiny/BlogImgBed/main/img/image-20210519222208724.png" alt="image-20210519222208724" style="zoom: 67%;" loading="lazy"><p>学习几个二进制操作符：</p><ul><li><p>&amp;</p><p>&amp;运算通常用于二进制取位操作，例如一个数 &amp; 1 的结果就是取二进制的最末位。还可以判断奇偶，<code>x&amp;1==0</code>为偶，<code>x&amp;1==1</code>为奇。</p></li><li><p><code>&gt;</code></p><p>&gt;&gt;运算比较单纯,二进制去掉最后一位，移位操作，不断遍历b的二进制位。相当于除2</p></li></ul><p>总结一下快速幂取模的代码：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1</span>;   <span class="comment">//记录结果</span></span><br><span class="line">a=a%c;   <span class="comment">//预处理，使得a处于c的数据范围之下</span></span><br><span class="line"><span class="keyword">while</span>(b!=<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>){</span><br><span class="line">             ans=(ans*a)%c;   <span class="comment">//如果b的二进制位不是0，那么我们的结果是要参与运算的</span></span><br><span class="line">        }</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;    <span class="comment">//二进制的移位操作，相当于每次除以2，用二进制看，就是我们不断的遍历b的二进制位</span></span><br><span class="line">a=(a*a)%c;   <span class="comment">//不断的加倍</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p>好的，引入了上述技术之后，回归本题看一下它的独特点：</p><p><a href="https://www.jianshu.com/p/16e90704d3cd">https://www.jianshu.com/p/16e90704d3cd</a></p><p>涉及到一个数学推导</p><p>而我竟然，没看懂qwq</p><h1>矩阵与矩阵快速幂</h1><h2 id="计算两个矩阵的乘积"><a class="header-anchor" href="#计算两个矩阵的乘积">¶</a>计算两个矩阵的乘积</h2><p><a href="https://www.nowcoder.com/practice/ed6552d03e624ba58d16af6d57e1c3e9?tpId=40&amp;tqId=21502&amp;tPage=9&amp;rp=9&amp;ru=/ta/kaoyan&amp;qru=/ta/kaoyan/question-ranking">https://www.nowcoder.com/practice/ed6552d03e624ba58d16af6d57e1c3e9?tpId=40&amp;tqId=21502&amp;tPage=9&amp;rp=9&amp;ru=/ta/kaoyan&amp;qru=/ta/kaoyan/question-ranking</a></p><p>本来以为无脑写，结果中间还是想了一下，其实需要三层循环</p><p>书上把操作都写成了函数，我是硬编码的，感觉都行</p><h2 id="矩阵幂"><a class="header-anchor" href="#矩阵幂">¶</a>矩阵幂</h2><p><a href="https://www.nowcoder.com/practice/31e539ab08f949a8bece2a7503e9319a?tpId=67&amp;tqId=29638&amp;tPage=1&amp;ru=/kaoyan/retest/1005&amp;qru=/ta/bupt-kaoyan/question-ranking">https://www.nowcoder.com/practice/31e539ab08f949a8bece2a7503e9319a?tpId=67&amp;tqId=29638&amp;tPage=1&amp;ru=/kaoyan/retest/1005&amp;qru=/ta/bupt-kaoyan/question-ranking</a></p><p>注意到矩阵大小不会超过10*10，且里面的元素的值也不会超过10</p><p>大致思路和快速幂是一样的，唯一的不同大概就是：</p><ul><li>快速幂：ans初始为1</li><li>矩阵快速幂：ans初始为单位矩阵</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_N 10 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span>{</span></span><br><span class="line"><span class="keyword">int</span> row;</span><br><span class="line"><span class="keyword">int</span> col;</span><br><span class="line"><span class="keyword">int</span> matrix[MAX_N][MAX_N];<span class="comment">//直接开大数组，不“动态分配” </span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印矩阵 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMatrix</span><span class="params">(struct Matrix m)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m.row;i++){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m.col;j++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,m.matrix[i][j]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//矩阵相乘</span></span><br><span class="line"><span class="function">struct Matrix <span class="title">multiply</span><span class="params">(struct Matrix m,struct Matrix n)</span></span>{</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> <span class="title">ans</span>;</span></span><br><span class="line">ans.row=m.row;</span><br><span class="line">ans.col=n.col;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m.row;i++){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n.col;j++){</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;m.col;k++){</span><br><span class="line">sum+=m.matrix[i][k]*n.matrix[k][j];</span><br><span class="line">}</span><br><span class="line">ans.matrix[i][j]=sum;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="comment">//矩阵快速幂</span></span><br><span class="line"><span class="function">struct Matrix <span class="title">fastExp</span><span class="params">(struct Matrix m,<span class="keyword">int</span> k)</span></span>{</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> <span class="title">ans</span>;</span></span><br><span class="line">ans.row=m.row;</span><br><span class="line">ans.col=m.col;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ans矩阵初始化为单位矩阵 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ans.row;i++){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ans.col;j++){</span><br><span class="line"><span class="keyword">if</span>(i==j){</span><br><span class="line">ans.matrix[i][j]=<span class="number">1</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">ans.matrix[i][j]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始累乘快速幂</span></span><br><span class="line"><span class="keyword">while</span>(k!=<span class="number">0</span>){</span><br><span class="line"><span class="keyword">if</span>(k%<span class="number">2</span>==<span class="number">1</span>){</span><br><span class="line">ans=multiply(ans,m);</span><br><span class="line">}</span><br><span class="line">k/=<span class="number">2</span>;</span><br><span class="line">m=multiply(m,m);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ans; </span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k){</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> <span class="title">m</span>;</span></span><br><span class="line">m.row=n;</span><br><span class="line">m.col=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++){</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m.matrix[i][j]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> <span class="title">ans</span>;</span></span><br><span class="line">ans.row=n;</span><br><span class="line">ans.col=n;</span><br><span class="line">ans=fastExp(m,k);</span><br><span class="line">printMatrix(ans); </span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="A-B-for-Matrices"><a class="header-anchor" href="#A-B-for-Matrices">¶</a>A+B for Matrices</h2><p><a href="http://t.cn/Aipb7GBG">http://t.cn/Aipb7GBG</a></p><h3 id="题意"><a class="header-anchor" href="#题意">¶</a>题意</h3><p>输入包括几个test case，每个case开头是一对整数M和N，分别表示矩阵的行和列</p><p>然后下面接上2M行，每行有N个整数</p><p>前M行是A的数据，后M行是B的数据</p><p>结束的case是M==0，不需要处理</p><p>要求输出：对于每个case，输出A+B的0 row与0 col的总数</p><h3 id="分析"><a class="header-anchor" href="#分析">¶</a>分析</h3><p>听起来不难啊，不知道会不会卡时间</p><hr><p>啊，居然没卡时间，美滋滋</p><h2 id="递推数列（较难，重要）"><a class="header-anchor" href="#递推数列（较难，重要）">¶</a>递推数列（较难，重要）</h2><p>一看就不是什么好搞的……</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day14质数&amp;分解质因数-小可的机试练习日记</title>
      <link href="2021/05/14/Day14%E8%B4%A8%E6%95%B0-%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
      <url>2021/05/14/Day14%E8%B4%A8%E6%95%B0-%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="素数判定"><a class="header-anchor" href="#素数判定">¶</a>素数判定</h2><p><a href="http://t.cn/AiCuWE0Q">http://t.cn/AiCuWE0Q</a></p><p>注意单独处理一下0/1/负数的情况</p><p>记录一下素数判定的函数：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(n);i++){</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>){</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="素数"><a class="header-anchor" href="#素数">¶</a>素数</h2><p><a href="http://t.cn/AiCulqtW">http://t.cn/AiCulqtW</a></p><p>比较简单~只要遍历这个区间就可</p><ul><li><p>学习</p><p>看了答案才知道，其实可以优化，就是判定一个i为素数之后，可以标记它的倍数为非素数~</p></li></ul><h2 id="Prime-Number"><a class="header-anchor" href="#Prime-Number">¶</a>Prime Number</h2><p><a href="https://www.nowcoder.com/practice/c5f8688cea8a4a9a88edbd67d1358415?tpId=62&amp;tqId=29467&amp;tPage=1&amp;ru=%2Fkaoyan%2Fretest%2F2002&amp;qru=%2Fta%2Fsju-kaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/c5f8688cea8a4a9a88edbd67d1358415?tpId=62&amp;tqId=29467&amp;tPage=1&amp;ru=%2Fkaoyan%2Fretest%2F2002&amp;qru=%2Fta%2Fsju-kaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p><h2 id="质因数的个数"><a class="header-anchor" href="#质因数的个数">¶</a>质因数的个数</h2><p><a href="https://www.nowcoder.com/practice/20426b85f7fc4ba8b0844cc04807fbd9?tpId=60&amp;tqId=29479&amp;tPage=1&amp;ru=%2Fkaoyan%2Fretest%2F1001&amp;qru=%2Fta%2Ftsing-kaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/20426b85f7fc4ba8b0844cc04807fbd9?tpId=60&amp;tqId=29479&amp;tPage=1&amp;ru=%2Fkaoyan%2Fretest%2F1001&amp;qru=%2Fta%2Ftsing-kaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p><p>这道题书上给了不错的思路，听起来很优雅：</p><p>预处理，找出题目数据范围中所有可能的素数；输入n之后，再判断小于n的那些素数是否是n的因子；如果是因子，则通过<strong>试除</strong>来判断此因子的幂指数</p><p>这个试除非常有意思，值得好好学习一下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li><p>错误</p><p>编译出错了：</p><img src="C:\Users\10437\AppData\Roaming\Typora\typora-user-images\image-20210515150931046.png" alt="image-20210515150931046" style="zoom: 50%;" loading="lazy"><p>应该是不能在这里声明变量，放到main函数里面就可以……</p></li><li><p>学习</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span>* isPrime)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(<span class="number">1e9</span>)+<span class="number">1</span>;i++){</span><br><span class="line">isPrime[i]=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preProcess</span><span class="params">(<span class="keyword">int</span>* isPrime)</span></span>{</span><br><span class="line">isPrime[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">isPrime[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(<span class="number">1e9</span>)+<span class="number">1</span>;i++){</span><br><span class="line"><span class="keyword">if</span>(!isPrime[i]){<span class="comment">//如果不是质数，就跳过 </span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}<span class="keyword">else</span>{<span class="comment">//如果是质数，就加到prime向量里 ；并设置其倍数为false </span></span><br><span class="line">prime.push_back(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i*i;j&lt;(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(<span class="number">1e9</span>)+<span class="number">1</span>;j+=i){</span><br><span class="line">isPrime[j]=<span class="number">0</span>;</span><br><span class="line">} </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line"><span class="keyword">int</span> isPrime[(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(<span class="number">1e9</span>)+<span class="number">1</span>];</span><br><span class="line">init(isPrime);</span><br><span class="line">preProcess(isPrime);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n){</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prime.<span class="built_in">size</span>()&amp;&amp;prime[i]&lt;=n;i++){</span><br><span class="line"><span class="keyword">while</span>(n%prime[i]==<span class="number">0</span>){</span><br><span class="line">n/=prime[i];</span><br><span class="line">sum++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">1</span>){</span><br><span class="line">sum++;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意<code>while(n%prime[i]==0)</code>是一个试除的方法</p><p>还有我搞不懂为什么要加n&gt;1…………，但是就这样记着吧</p><p>书上给的道理是：<strong>n至多只存在一个大于sqrt(n)的素因数</strong></p></li></ul><h2 id="约数的个数"><a class="header-anchor" href="#约数的个数">¶</a>约数的个数</h2><p><a href="http://t.cn/Aip7dTUp">http://t.cn/Aip7dTUp</a></p><ul><li><p>错误</p><p>超时：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> num)</span></span>{</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++){</span><br><span class="line"><span class="keyword">if</span>(num%i==<span class="number">0</span>){</span><br><span class="line">sum++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;N){</span><br><span class="line"><span class="keyword">int</span> num[N];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++){</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;num[i];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++){</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;count(num[i])&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>再改了一版，还是超时：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int count(int num){</span><br><span class="line">int sum=2;</span><br><span class="line">for(int i=2;i&lt;num;i++){</span><br><span class="line">if(num%i==0){</span><br><span class="line">sum++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">return sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">int main(void){</span><br><span class="line">int N;</span><br><span class="line">while(cin&gt;&gt;N){</span><br><span class="line">int num[N];</span><br><span class="line">for(int i=0;i&lt;N;i++){</span><br><span class="line">cin&gt;&gt;num[i];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;N;i++){</span><br><span class="line">if(num[i]==1){</span><br><span class="line">cout&lt;&lt;1&lt;&lt;" ";</span><br><span class="line">}else{</span><br><span class="line">cout&lt;&lt;count(num[i])&lt;&lt;" ";</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">} </span><br><span class="line">return 0;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>感觉这样做的复杂度是O(n^2)</p><p>试下预处理吧……不对啊这又不是素数问题</p></li><li><p>内存超限：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> num)</span></span>{</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag[num+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num+<span class="number">1</span>;i++){</span><br><span class="line">flag[i]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++){</span><br><span class="line"><span class="keyword">if</span>(i*i==num){<span class="comment">//平方数 </span></span><br><span class="line">sum++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}<span class="keyword">else</span>{<span class="comment">//非平方数 </span></span><br><span class="line"><span class="keyword">if</span>(flag[i]==<span class="number">1</span>){</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">if</span>(num%i==<span class="number">0</span>){</span><br><span class="line">sum+=<span class="number">2</span>;</span><br><span class="line">flag[num/i]=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;N){</span><br><span class="line"><span class="keyword">int</span> num[N];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++){</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;num[i];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++){</span><br><span class="line"><span class="keyword">if</span>(num[i]==<span class="number">1</span>){</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;count(num[i])&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>是不是用flag用的……换一种标记方式？</p></li><li><p>又超时……</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> num)</span></span>{</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> endpoint=num;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++){</span><br><span class="line"><span class="keyword">if</span>(i*i==num){<span class="comment">//平方数 </span></span><br><span class="line">sum++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}<span class="keyword">else</span>{<span class="comment">//非平方数 </span></span><br><span class="line"><span class="keyword">if</span>(i==endpoint){</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">if</span>(num%i==<span class="number">0</span>){</span><br><span class="line">sum+=<span class="number">2</span>;</span><br><span class="line">endpoint=num/i;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;N){</span><br><span class="line"><span class="keyword">int</span> num[N];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++){</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;num[i];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++){</span><br><span class="line"><span class="keyword">if</span>(num[i]==<span class="number">1</span>){</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;count(num[i])&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>学习</p><p>咱们还是看下评论区学习一下吧</p><p>其实思路是想到了的，基本一样，但是我的就是没过……</p><p>学一下count函数吧：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> num)</span></span>{</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i*i&lt;num;i++){</span><br><span class="line"><span class="keyword">if</span>(num%i==<span class="number">0</span>){</span><br><span class="line">sum+=<span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i*i==num){</span><br><span class="line">sum++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="整除问题（重要，较难）"><a class="header-anchor" href="#整除问题（重要，较难）">¶</a>整除问题（重要，较难）</h2><p><a href="http://t.cn/Aip7eHBD">http://t.cn/Aip7eHBD</a></p><ul><li><p>分析</p><p>根据n先算出n!，然后求k，使得(n!) % (a^k) ==0，但(n!) % (a^(k+1)) !=0</p><p>感觉这道题可能数字比较大</p></li><li><p>学习</p><p>看了一下题解，果然不是常规的暴力方法可以解决的……</p><p>而且我压根都没有想到素因子这回事</p><p><a href="https://blog.csdn.net/csyifanZhang/article/details/105754286%E5%8F%AF%E4%BB%A5%E5%8F%82%E8%80%83%E8%BF%99%E4%B8%AA%E9%A2%98%E8%A7%A3">https://blog.csdn.net/csyifanZhang/article/details/105754286可以参考这个题解</a></p><p>所以说，一个数A能整除另一个数B，代表A、B分解质因子之后，B有的A都有，且对应的A的质因子指数必然比B大</p><p>在本题中，a的质因子分解，和n!的质因子分解是不一样的</p><ul><li>a的质因子分解</li></ul></li></ul><p>太难了……暴哭qwq</p><hr><p>坚持一下：</p><ul><li><p>n!的质因子分解</p></li><li><p>a的质因子分解</p><p>这里和质因子的个数又有点不一样，本题需要知道每个质因子对应的幂，而“质因子”的个数这道题，只需要求和</p></li></ul><p>先搁一下吧……太烧脑了呜呜呜</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 质数 </tag>
            
            <tag> 质因数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day13最大公约数与最小公倍数-小可的机试练习日记</title>
      <link href="2021/05/14/Day13%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E4%B8%8E%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
      <url>2021/05/14/Day13%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E4%B8%8E%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="最大公约数"><a class="header-anchor" href="#最大公约数">¶</a>最大公约数</h2><p><a href="https://www.nowcoder.com/practice/20216f2c84bc438eb5ef05e382536fd3?tpId=40&amp;tqId=21492&amp;tPage=8&amp;rp=8&amp;ru=%2Fta%2Fkaoyan&amp;qru=%2Fta%2Fkaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/20216f2c84bc438eb5ef05e382536fd3?tpId=40&amp;tqId=21492&amp;tPage=8&amp;rp=8&amp;ru=%2Fta%2Fkaoyan&amp;qru=%2Fta%2Fkaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p><p>学一下GCD函数的写法：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GCD</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>){</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">return</span> GCD(b,a%b);</span><br><span class="line">}</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure><p>为什么是b为0就终止呢？</p><p>因为b这个位置的数一定比a这个位置的数小……最开始一次递归，传入的参数是A=b,B=a%b；</p><p>由于B是a%b的结果，也就是a/b的余数，所以余数必然比除数小啊，那么B&lt;A</p><p>所以B是先降为0的那个数，只要判断它就好啦</p><h2 id="最小公倍数"><a class="header-anchor" href="#最小公倍数">¶</a>最小公倍数</h2><p>LCM=a*b/GCD(a,b)</p><h2 id="最简真分数"><a class="header-anchor" href="#最简真分数">¶</a>最简真分数</h2><p><a href="http://t.cn/AiCua2g8">http://t.cn/AiCua2g8</a></p><p>最简真分数，就是分子&lt;分母，且分子和分母的GCD==1</p><p>简单啦，感觉给数据排成有序的会更好~</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最大公约数 </tag>
            
            <tag> 最小公倍数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day12进制转换-小可的机试练习日记</title>
      <link href="2021/05/10/Day12%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
      <url>2021/05/10/Day12%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="二进制数"><a class="header-anchor" href="#二进制数">¶</a>二进制数</h2><p><a href="https://www.nowcoder.com/practice/103dd589fed14457a673c613d8de3841?tpId=67&amp;tqId=29634&amp;tPage=1&amp;ru=/kaoyan/retest/1005&amp;qru=/ta/bupt-kaoyan/question-ranking">https://www.nowcoder.com/practice/103dd589fed14457a673c613d8de3841?tpId=67&amp;tqId=29634&amp;tPage=1&amp;ru=/kaoyan/retest/1005&amp;qru=/ta/bupt-kaoyan/question-ranking</a></p><p>简单啦，只要求余和整除两种操作循环就可以</p><h2 id="进制转换（重要）"><a class="header-anchor" href="#进制转换（重要）">¶</a>进制转换（重要）</h2><p><a href="https://www.nowcoder.com/practice/0337e32b1e5543a19fa380e36d9343d7?tpId=60&amp;tqId=29473&amp;tPage=1&amp;ru=%2Fkaoyan%2Fretest%2F1001&amp;qru=%2Fta%2Ftsing-kaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/0337e32b1e5543a19fa380e36d9343d7?tpId=60&amp;tqId=29473&amp;tPage=1&amp;ru=%2Fkaoyan%2Fretest%2F1001&amp;qru=%2Fta%2Ftsing-kaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p><p>感觉这道题主要是需要处理大数的问题</p><p>试一下字符串？</p><hr><p>看了书，用字符串是没错的……</p><p>取模的操作可以等价于对最后一位取模</p><p>整除的操作等价于……可以看看书上的操作，真是令人迷惑的优雅</p><p><strong>这道题的“字符串除法”很值得学习。</strong></p><h2 id="10进制-vs-2进制（重要）"><a class="header-anchor" href="#10进制-vs-2进制（重要）">¶</a>10进制 vs 2进制（重要）</h2><p><a href="https://www.nowcoder.com/practice/fd972d5d5cf04dd4bb4e5f027d4fc11e?tpId=60&amp;tqId=29498&amp;tPage=2&amp;ru=%2Fkaoyan%2Fretest%2F1001&amp;qru=%2Fta%2Ftsing-kaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/fd972d5d5cf04dd4bb4e5f027d4fc11e?tpId=60&amp;tqId=29498&amp;tPage=2&amp;ru=%2Fkaoyan%2Fretest%2F1001&amp;qru=%2Fta%2Ftsing-kaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p><p>惊了，这道题位数更多</p><p>但是其实应该和上一道题是同理的……</p><p>突然意识到了从二进制转回十进制的艰辛……本来之间按照公式加起来应该是可以的，但是由于加出来可能很大，一个int是存不下的，所以还是得用字符串的形式来存储它，也就是每一位每一位地算出来……</p><ul><li>错误：神奇的错误，居然是因为pow返回的是double</li></ul><p><img src="C:%5CUsers%5C10437%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210510215344335.png" alt="image-20210510215344335" loading="lazy"></p><p>不知道又是什么错……</p><img src="C:\Users\10437\AppData\Roaming\Typora\typora-user-images\image-20210510215939355.png" alt="image-20210510215939355" style="zoom: 67%;" loading="lazy"><p>噗，自己简直就是个bug制造机</p><p>还是看着书上来写吧……明天？</p><hr><p>过得很艰难……这道题值得记忆啊</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串除法</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">divide</span><span class="params">(<span class="built_in">string</span> str,<span class="keyword">int</span> x)</span></span>{</span><br><span class="line"><span class="keyword">int</span> remainder=<span class="number">0</span>;<span class="comment">//高位余数 </span></span><br><span class="line"><span class="keyword">int</span> current;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();i++){</span><br><span class="line">current=remainder*<span class="number">10</span>+(str[i]-<span class="string">'0'</span>);<span class="comment">//求现在的被除数</span></span><br><span class="line">str[i]=current/x+<span class="string">'0'</span>;<span class="comment">//将商保存到这一位数字</span></span><br><span class="line">remainder=current%x; <span class="comment">//计算这次的余数 </span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后的结果，要处理一下去掉高位的0 </span></span><br><span class="line"><span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(str[index]==<span class="string">'0'</span>){<span class="comment">//这里别写成0！！！！ </span></span><br><span class="line">index++;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> str.substr(index); </span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串乘法 </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">multiple</span><span class="params">(<span class="built_in">string</span> str,<span class="keyword">int</span> x)</span></span>{</span><br><span class="line"><span class="keyword">int</span> carry=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> current;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=str.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--){<span class="comment">//注意乘法是从最低位往前面乘的 </span></span><br><span class="line">current=carry+(str[i]-<span class="string">'0'</span>)*x;</span><br><span class="line">str[i]=current%<span class="number">10</span>+<span class="string">'0'</span>;</span><br><span class="line">carry=current/<span class="number">10</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理最高位进位 </span></span><br><span class="line"><span class="keyword">if</span>(carry!=<span class="number">0</span>){</span><br><span class="line">str=<span class="string">"1"</span>+str; </span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串加法 </span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">add</span><span class="params">(<span class="built_in">string</span> str,<span class="keyword">int</span> x)</span></span>{</span><br><span class="line"><span class="keyword">int</span> carry=x;</span><br><span class="line"><span class="keyword">int</span> current;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=str.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--){</span><br><span class="line">current=carry+(str[i]-<span class="string">'0'</span>);</span><br><span class="line">str[i]=current%<span class="number">10</span>+<span class="string">'0'</span>;</span><br><span class="line">carry=current/<span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(carry!=<span class="number">0</span>){</span><br><span class="line">str=<span class="string">"1"</span>+str;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str){</span><br><span class="line"><span class="comment">//原数字转2进制 </span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; binary;</span><br><span class="line"><span class="keyword">int</span> last;</span><br><span class="line"><span class="keyword">while</span>(str.<span class="built_in">size</span>()!=<span class="number">0</span>){</span><br><span class="line">last=str[str.<span class="built_in">size</span>()<span class="number">-1</span>]-<span class="string">'0'</span>;</span><br><span class="line">binary.push_back(last%<span class="number">2</span>);</span><br><span class="line">str=divide(str,<span class="number">2</span>);</span><br><span class="line">} </span><br><span class="line"><span class="comment">//binary里面是倒着放的二进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二进制转十进制 </span></span><br><span class="line"><span class="built_in">string</span> answer=<span class="string">"0"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;binary.<span class="built_in">size</span>();i++){</span><br><span class="line">answer=multiple(answer,<span class="number">2</span>);<span class="comment">//说实话，不是很理解先乘后加…… </span></span><br><span class="line">answer=add(answer,binary[i]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;answer&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="进制转换2（重要）"><a class="header-anchor" href="#进制转换2（重要）">¶</a>进制转换2（重要）</h2><p><a href="https://www.nowcoder.com/practice/ae4b3c4a968745618d65b866002bbd32?tpId=60&amp;tqId=31034&amp;tPage=2&amp;ru=%2Fkaoyan%2Fretest%2F1001&amp;qru=%2Fta%2Ftsing-kaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/ae4b3c4a968745618d65b866002bbd32?tpId=60&amp;tqId=31034&amp;tPage=2&amp;ru=%2Fkaoyan%2Fretest%2F1001&amp;qru=%2Fta%2Ftsing-kaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p><p>清华的题……表面看起来平平无奇，实际上难得一匹</p><p>呜呜呜我好菜啊</p><ul><li><p>学习</p><p>这道题的一个要点在于，大于十进制的话，有的数字要用字符表示</p><p>要求从M进制转为N进制，那么应该……找十进制作为中介，M—&gt;10——&gt;N</p><ul><li><p>M—&gt;10的方法：</p><p>将每一位数字乘上这一位的权重：k^(n-1)</p></li><li><p>10—&gt;N的方法：</p><p>循环，对N取模，除N</p></li></ul></li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">char2int</span><span class="params">(<span class="keyword">char</span> c)</span></span>{</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line"><span class="keyword">if</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>){</span><br><span class="line">result=c-<span class="string">'0'</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">result=c-<span class="string">'A'</span>+<span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">int2char</span><span class="params">(<span class="keyword">int</span> i)</span></span>{</span><br><span class="line"><span class="keyword">char</span> result;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">0</span>&amp;&amp;i&lt;=<span class="number">9</span>){</span><br><span class="line">result=i+<span class="string">'0'</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">result=i<span class="number">-10</span>+<span class="string">'a'</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line"><span class="keyword">int</span> M,N;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;M&gt;&gt;N){</span><br><span class="line"><span class="built_in">string</span> x;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line"></span><br><span class="line"><span class="comment">//m进制转10进制 </span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x.<span class="built_in">size</span>();i++){<span class="comment">//为什么感觉这里是反的？？ ——懂了，没反…… </span></span><br><span class="line">num*=M;</span><br><span class="line">num+=char2int(x[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; answer;</span><br><span class="line"><span class="keyword">while</span>(num!=<span class="number">0</span>){</span><br><span class="line">answer.push_back(int2char(num%N));</span><br><span class="line">num/=N;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=answer.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,answer[i]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我知道M-&gt;10的操作是什么意思了……</p><p>是每次加完高位的数字，然后乘以M，也就是把它往前推一位，升一下它的权重</p><p>所以其实没反，高位一直乘到最后，它还是拥有最高权重的那个</p><h2 id="八进制"><a class="header-anchor" href="#八进制">¶</a>八进制</h2><p><a href="https://www.nowcoder.com/practice/eda051c1effc4dffa630bc8507f0c5f7?tpId=69&amp;tqId=29677&amp;tPage=2&amp;ru=%2Fkaoyan%2Fretest%2F11002&amp;qru=%2Fta%2Fhust-kaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/eda051c1effc4dffa630bc8507f0c5f7?tpId=69&amp;tqId=29677&amp;tPage=2&amp;ru=%2Fkaoyan%2Fretest%2F11002&amp;qru=%2Fta%2Fhust-kaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p><p>简单</p><h2 id="又一版A-B"><a class="header-anchor" href="#又一版A-B">¶</a>又一版A+B</h2><p><a href="http://t.cn/AiCuOSWv">http://t.cn/AiCuOSWv</a></p><p>注意题目里写的，两个数在2^31-1之内，那相加一下是不是有可能溢出？</p><p>但是用long long应该还是装得下……</p><p>而且m不超过10进制，不涉及字符表示的问题</p><ul><li><p>错误</p><p>输入为2 0 0，输出应为0，但是实际上没有输出，是因为while的判断条件略过了0的情况，所以应该补一个</p></li></ul><h2 id="进制转换（北大）"><a class="header-anchor" href="#进制转换（北大）">¶</a>进制转换（北大）</h2><p><a href="http://t.cn/AiCuig9B">http://t.cn/AiCuig9B</a></p><p>累加计算的别忘了初始化</p><h2 id="数制转换"><a class="header-anchor" href="#数制转换">¶</a>数制转换</h2><p><a href="http://t.cn/AiCu6ne4">http://t.cn/AiCu6ne4</a></p><p>输入时大小写不定，输出时全用大写</p><p>按照之前思路，以10进制作为中转站</p><p>简单，注意下大小的问题就可以</p><p>进制转换貌似有多种方法，其中数字形式的和字符串形式的写起来还是很不一样的……值得多总结一下</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Day11栈-小可的机试练习日记</title>
      <link href="2021/04/21/Day11%E6%A0%88-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
      <url>2021/04/21/Day11%E6%A0%88-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Zero-Complexity-Transposition"><a class="header-anchor" href="#Zero-Complexity-Transposition">¶</a>Zero-Complexity Transposition</h2><p><a href="https://www.nowcoder.com/practice/c54775799f634c72b447ef31eb36e975?tpId=40&amp;tqId=21440&amp;tPage=1&amp;rp=1&amp;ru=%2Fta%2Fkaoyan&amp;qru=%2Fta%2Fkaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/c54775799f634c72b447ef31eb36e975?tpId=40&amp;tqId=21440&amp;tPage=1&amp;rp=1&amp;ru=%2Fta%2Fkaoyan&amp;qru=%2Fta%2Fkaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p><p>这个问题很简单啦，用栈逆序输出就可以了</p><h2 id="括号匹配问题（重要）"><a class="header-anchor" href="#括号匹配问题（重要）">¶</a>括号匹配问题（重要）</h2><p>思路在书上已经写得很清楚了</p><p>前面还写的很顺，但是遇到的问题就是，最后栈不空的时候，说明左括号没匹配，那么我要怎么知道这些没匹配的左括号是来自于原字符串的哪里呢？</p><p>然后看了看书上的题解，恍然大悟，原来人家本来存的就是下标啊！太机智了！</p><hr><p>遂按照此思路重写一遍~</p><p>过啦嘻嘻</p><p>其实只要小小改改就可以</p><h2 id="简单计算器（重要）"><a class="header-anchor" href="#简单计算器（重要）">¶</a>简单计算器（重要）</h2><p><a href="https://www.nowcoder.com/practice/5759c29a28cb4361bc3605979d5a6130?tpId=63&amp;tqId=29576&amp;tPage=1&amp;ru=%2Fkaoyan%2Fretest%2F9001&amp;qru=%2Fta%2Fzju-kaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/5759c29a28cb4361bc3605979d5a6130?tpId=63&amp;tqId=29576&amp;tPage=1&amp;ru=%2Fkaoyan%2Fretest%2F9001&amp;qru=%2Fta%2Fzju-kaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p><p>有几个值得注意的点：</p><ul><li>运算数和运算符之间用一个空格分隔</li></ul><p>思路整理：</p><ul><li><p>运算数和运算符分别用两个栈来存</p></li><li><p>运算符栈先压入一个’#’，其优先级最低</p></li><li><p>表达式尾部先加一个‘$’，其优先级最低</p></li><li><p>从左到右遍历字符串</p><ul><li><p>为运算数</p><p>压入运算数栈</p></li><li><p>为运算符</p><p>和栈顶运算符优先级比较（这是个循环，直到现在运算符比栈顶的优先级高才可以压入）</p><ul><li><p>比栈顶的高</p><p>该运算符压入运算符栈</p></li><li><p>比栈顶的低或等于</p><p>弹出栈顶运算符，并从运算数栈弹出足够的运算数进行计算，算完把结果压入运算数栈</p></li></ul></li></ul></li></ul><p>由于这道题比较典型，所以学一下书上的结构：</p><hr><p>有点难，先歇会</p><hr><p>继续继续！</p><p>学到个很不错的方法，把string转float：</p><p><a href="https://blog.csdn.net/Buer_zhu/article/details/81093569">https://blog.csdn.net/Buer_zhu/article/details/81093569</a></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str=<span class="string">"123.0123"</span>;</span><br><span class="line"><span class="keyword">float</span> f=atof(str.c_str());</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;f;</span><br></pre></td></tr></tbody></table></figure><p>注意c_str()这个好东西</p><p>是时候整理一下string和char*的区别了……</p><hr><p>写到一半觉得脑子乱乱的……</p><hr><p>终于过啦，注意在栈底和字符串尾部加符号的操作，很优雅</p><h2 id="堆栈的使用"><a class="header-anchor" href="#堆栈的使用">¶</a>堆栈的使用</h2><p>太简单了</p><h2 id="计算表达式"><a class="header-anchor" href="#计算表达式">¶</a>计算表达式</h2><p><a href="https://www.nowcoder.com/practice/7b18aa6b7cc14f8eaae6b8acdebf890b?tpId=62&amp;tqId=29459&amp;tPage=1&amp;ru=%2Fkaoyan%2Fretest%2F2002&amp;qru=%2Fta%2Fsju-kaoyan%2Fquestion-ranking&amp;tab=answerKey">https://www.nowcoder.com/practice/7b18aa6b7cc14f8eaae6b8acdebf890b?tpId=62&amp;tqId=29459&amp;tPage=1&amp;ru=%2Fkaoyan%2Fretest%2F2002&amp;qru=%2Fta%2Fsju-kaoyan%2Fquestion-ranking&amp;tab=answerKey</a></p><p>这是无括号无空格的输入</p><p>过啦，和之前的简单计算器很像</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day10队列-小可的机试练习日记</title>
      <link href="2021/04/21/Day10%E9%98%9F%E5%88%97-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
      <url>2021/04/21/Day10%E9%98%9F%E5%88%97-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="约瑟夫问题"><a class="header-anchor" href="#约瑟夫问题">¶</a>约瑟夫问题</h2><p>学到一个很重要的——把queue当循环队列来用的操作</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//让第p个小孩做队首，这样就可以更方便之后的出队</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;p;i++){<span class="comment">//p-1次 </span></span><br><span class="line">children.push(children.front());<span class="comment">//前面的值压到后面 </span></span><br><span class="line">children.pop();<span class="comment">//前面的元素弹出 </span></span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure><h2 id="猫狗收容所"><a class="header-anchor" href="#猫狗收容所">¶</a>猫狗收容所</h2><p>重点就是循环队列的使用啦</p><p>不过因为这道题没在oj上找到，所以……</p><p>我也不知道能不能通过其他的测试用例</p><p>最重要的是，我还是不太会处理那个格式控制……</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day9-小可的机试练习日记-向量</title>
      <link href="2021/04/20/Day9-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0-%E5%90%91%E9%87%8F/"/>
      <url>2021/04/20/Day9-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0-%E5%90%91%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="完数与盈数"><a class="header-anchor" href="#完数与盈数">¶</a>完数与盈数</h2><p><a href="https://www.nowcoder.com/practice/ccc3d1e78014486fb7eed3c50e05c99d?tpId=60&amp;tqId=29492&amp;tPage=1&amp;ru=/kaoyan/retest/1001&amp;qru=/ta/tsing-kaoyan/question-ranking">https://www.nowcoder.com/practice/ccc3d1e78014486fb7eed3c50e05c99d?tpId=60&amp;tqId=29492&amp;tPage=1&amp;ru=/kaoyan/retest/1001&amp;qru=/ta/tsing-kaoyan/question-ranking</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Day8字符串匹配-小可的机试练习日记</title>
      <link href="2021/04/17/Day8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
      <url>2021/04/17/Day8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D-%E5%B0%8F%E5%8F%AF%E7%9A%84%E6%9C%BA%E8%AF%95%E7%BB%83%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="KMP算法"><a class="header-anchor" href="#KMP算法">¶</a>KMP算法</h2><p><a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html">http://www.ruanyifeng.com/blog/2013/05/Knuth–Morris–Pratt_algorithm.html</a></p><p>这篇真挺不错的，一下就听懂了哈哈哈</p><p>如何更好地理解和掌握 KMP 算法? - 海纳的回答 - 知乎 <a href="https://www.zhihu.com/question/21923021/answer/281346746">https://www.zhihu.com/question/21923021/answer/281346746</a></p><p>还有这篇对于PMT的解释挺不错的~</p><p><a href="https://www.youtube.com/watch?v=GTJr8OvyEVQ%E8%BF%99%E4%B8%AA%E8%A7%86%E9%A2%91%E8%BF%98%E4%B8%8D%E9%94%99">https://www.youtube.com/watch?v=GTJr8OvyEVQ这个视频还不错</a></p><p><a href="https://blog.csdn.net/starstar1992/article/details/54913261">https://blog.csdn.net/starstar1992/article/details/54913261</a> 600多赞的博客</p><h3 id="关于实现"><a class="header-anchor" href="#关于实现">¶</a>关于实现</h3><ul><li>Youtube的Tusha的</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">computePrefix</span><span class="params">(<span class="built_in">string</span> pat)</span></span>{</span><br><span class="line">    <span class="keyword">int</span> m = pat.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">longestPrefix</span><span class="params">(m)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>; i &lt; m; i++){</span><br><span class="line">        <span class="keyword">while</span>(k &gt; <span class="number">0</span> &amp;&amp; pat[k] != pat[i]){</span><br><span class="line">            k = longestPrefix[k - <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(pat[i] == pat[k]){</span><br><span class="line">            longestPrefix[i] = ++k;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            longestPrefix[i] = k;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> longestPrefix;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KMP</span><span class="params">(<span class="built_in">string</span> str,<span class="built_in">string</span> pat)</span></span>{</span><br><span class="line">    <span class="keyword">int</span> n = str.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> m = pat.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; longestPrefix = computePrefix(pat);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, k = <span class="number">0</span>; i &lt; n; i++){</span><br><span class="line">        <span class="keyword">while</span>(k &gt; <span class="number">0</span> &amp;&amp; pat[k] != str[i]){</span><br><span class="line">            k = longestPrefix[k - <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(str[i] == pat[k]){</span><br><span class="line">            k++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(k == m){</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i - m + <span class="number">1</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">            k = longestPrefix[k - <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>根据这个算法，实践一下——如何计算PMT：</p><p><img src="https://raw.githubusercontent.com/Crestiny/BlogImgBed/main/img/image-20210418202513307.png" alt="image-20210418202513307" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/Crestiny/BlogImgBed/main/img/image-20210418202623962.png" alt="image-20210418202623962" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/Crestiny/BlogImgBed/main/img/image-20210418202733113.png" alt="image-20210418202733113" loading="lazy"></p><p>接下来，操作一下KMP算法：</p><p><img src="https://raw.githubusercontent.com/Crestiny/BlogImgBed/main/img/image-20210418205613508.png" alt="image-20210418205613508" loading="lazy"></p><p><img src="C:%5CUsers%5C10437%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210418205702043.png" alt="image-20210418205702043" loading="lazy"></p><p><img src="C:%5CUsers%5C10437%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210418205710647.png" alt="image-20210418205710647" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/Crestiny/BlogImgBed/main/img/image-20210418205737718.png" alt="image-20210418205737718" loading="lazy"></p><h2 id="Number-Sequence"><a class="header-anchor" href="#Number-Sequence">¶</a>Number Sequence</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1711">http://acm.hdu.edu.cn/showproblem.php?pid=1711</a></p><h3 id="题意"><a class="header-anchor" href="#题意">¶</a>题意</h3><p>有a，b两个数组里面存了数，a是被匹配的，b是模式，只要找到第一个匹配处就可以了，如果没有匹配就输出-1</p><p>歪个楼……我终于知道怎么多行缩进了……就是选中多行再按TAB啊！！！</p><h3 id="错误"><a class="header-anchor" href="#错误">¶</a>错误</h3><p>第一次交出现了Runtime Error(ACCESS_VIOLATION)的提示……</p><p>可能是哪里越界了？</p><p>好的，注意到了题目里面的数字范围，改了一下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">computePMT</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; pat,<span class="keyword">long</span> <span class="keyword">long</span> m)</span></span>{</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">PMT</span><span class="params">(m)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">1</span>,k=<span class="number">0</span>;i&lt;m;i++){</span><br><span class="line"><span class="keyword">while</span>(k&gt;<span class="number">0</span>&amp;&amp;pat[i]!=pat[k]){</span><br><span class="line">k=PMT[k<span class="number">-1</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pat[i]==pat[k]){</span><br><span class="line">PMT[i]=k+<span class="number">1</span>;</span><br><span class="line">k++;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">PMT[i]=k;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> PMT;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KMP</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; str,<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; pat,<span class="keyword">long</span> <span class="keyword">long</span> n,<span class="keyword">long</span> <span class="keyword">long</span> m,<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; PMT)</span></span>{</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> index=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">0</span>,k=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line"><span class="keyword">while</span>(k&gt;<span class="number">0</span>&amp;&amp;str[i]!=pat[k]){</span><br><span class="line">k=PMT[k<span class="number">-1</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(str[i]==pat[k]){</span><br><span class="line">k++;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(k==m){<span class="comment">//如果k在模式串的最右端了 </span></span><br><span class="line">index=i-m+<span class="number">2</span>;<span class="comment">//本来是+1的，但是这道题的索引是从1开始的 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;index&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">k=PMT[k<span class="number">-1</span>];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(index==<span class="number">-1</span>){</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--){</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">str</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">pat</span><span class="params">(m)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">str[i]=temp;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">long</span> i=<span class="number">0</span>;i&lt;m;i++){</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">pat[i]=temp;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; PMT;</span><br><span class="line">PMT=computePMT(pat,m);</span><br><span class="line">KMP(str,pat,n,m,PMT);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后由于用了太多vector，被制裁了——Memory Limit Exceeded</p><p>改了str和pat的vector，然而又出问题了……</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_N 1000001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_M 10001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">computePMT</span><span class="params">(<span class="built_in">string</span>* pat,<span class="keyword">long</span> <sp